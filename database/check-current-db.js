// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
    user: process.env.DB_USER || 'chiwawa',
    host: process.env.DB_HOST || '212.15.49.139',
    database: process.env.DB_NAME || 'chiwawa',
    password: process.env.DB_PASS,
    port: process.env.DB_PORT || 5432,
});

async function checkDatabase() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const client = await pool.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!');
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–î
        console.log('\nüìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
        const dbInfoResult = await client.query(`
            SELECT 
                current_database() as database_name,
                current_user as current_user,
                version() as postgres_version,
                pg_size_pretty(pg_database_size(current_database())) as database_size;
        `);
        
        const dbInfo = dbInfoResult.rows[0];
        console.log(`  üìÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbInfo.database_name}`);
        console.log(`  üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${dbInfo.current_user}`);
        console.log(`  üêò –í–µ—Ä—Å–∏—è PostgreSQL: ${dbInfo.postgres_version.split(' ')[1]}`);
        console.log(`  üíæ –†–∞–∑–º–µ—Ä –ë–î: ${dbInfo.database_size}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π
        console.log('\nüìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
        const tablesResult = await client.query(`
            SELECT 
                t.table_name,
                pg_size_pretty(pg_total_relation_size(quote_ident(t.table_name))) as table_size
            FROM information_schema.tables t
            WHERE t.table_schema = 'public' 
            ORDER BY t.table_name;
        `);
        
        console.log(`  –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tablesResult.rows.length}`);
        console.log('  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
        console.log('  ‚îÇ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã            ‚îÇ –†–∞–∑–º–µ—Ä       ‚îÇ');
        console.log('  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
        
        for (const table of tablesResult.rows) {
            try {
                const countResult = await client.query(`SELECT COUNT(*) as count FROM "${table.table_name}"`);
                const count = countResult.rows[0].count;
                console.log(`  ‚îÇ ${table.table_name.padEnd(27)} ‚îÇ ${table.table_size.padEnd(12)} ‚îÇ (${count} –∑–∞–ø–∏—Å–µ–π)`);
            } catch (err) {
                console.log(`  ‚îÇ ${table.table_name.padEnd(27)} ‚îÇ ${table.table_size.padEnd(12)} ‚îÇ (–æ—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞)`);
            }
        }
        console.log('  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
        const keyTables = ['users', 'applications', 'admin_logs', 'server_settings', 'email_templates', 'user_sessions'];
        
        for (const tableName of keyTables) {
            console.log(`\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã "${tableName}":`);
            
            const columnsResult = await client.query(`
                SELECT 
                    column_name, 
                    data_type, 
                    character_maximum_length,
                    is_nullable, 
                    column_default,
                    ordinal_position
                FROM information_schema.columns 
                WHERE table_name = $1 
                ORDER BY ordinal_position;
            `, [tableName]);
            
            if (columnsResult.rows.length > 0) {
                console.log('  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
                console.log('  ‚îÇ –ö–æ–ª–æ–Ω–∫–∞                 ‚îÇ –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö      ‚îÇ Nullable ‚îÇ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é    ‚îÇ');
                console.log('  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
                
                columnsResult.rows.forEach(row => {
                    const dataType = row.character_maximum_length 
                        ? `${row.data_type}(${row.character_maximum_length})`
                        : row.data_type;
                    const defaultValue = row.column_default || '-';
                    
                    console.log(`  ‚îÇ ${row.column_name.padEnd(23)} ‚îÇ ${dataType.padEnd(15)} ‚îÇ ${row.is_nullable.padEnd(8)} ‚îÇ ${(defaultValue.length > 15 ? defaultValue.substring(0, 12) + '...' : defaultValue).padEnd(15)} ‚îÇ`);
                });
                console.log('  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
                
                // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                const countResult = await client.query(`SELECT COUNT(*) as count FROM "${tableName}"`);
                console.log(`  üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${countResult.rows[0].count}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
                const indexesResult = await client.query(`
                    SELECT 
                        indexname,
                        indexdef
                    FROM pg_indexes 
                    WHERE tablename = $1;
                `, [tableName]);
                
                if (indexesResult.rows.length > 0) {
                    console.log(`  üîë –ò–Ω–¥–µ–∫—Å—ã (${indexesResult.rows.length}):`);
                    indexesResult.rows.forEach(idx => {
                        console.log(`    - ${idx.indexname}`);
                    });
                }
            } else {
                console.log(`  ‚ùå –¢–∞–±–ª–∏—Ü–∞ "${tableName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
        console.log('\nüîó –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏:');
        const foreignKeysResult = await client.query(`
            SELECT
                tc.table_name, 
                kcu.column_name,
                ccu.table_name AS foreign_table_name,
                ccu.column_name AS foreign_column_name 
            FROM 
                information_schema.table_constraints AS tc 
                JOIN information_schema.key_column_usage AS kcu
                  ON tc.constraint_name = kcu.constraint_name
                  AND tc.table_schema = kcu.table_schema
                JOIN information_schema.constraint_column_usage AS ccu
                  ON ccu.constraint_name = tc.constraint_name
                  AND ccu.table_schema = tc.table_schema
            WHERE tc.constraint_type = 'FOREIGN KEY'
            ORDER BY tc.table_name, kcu.column_name;
        `);
        
        if (foreignKeysResult.rows.length > 0) {
            foreignKeysResult.rows.forEach(fk => {
                console.log(`  ${fk.table_name}.${fk.column_name} -> ${fk.foreign_table_name}.${fk.foreign_column_name}`);
            });
        } else {
            console.log('  ‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        console.log('\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:');
        const settingsResult = await client.query(`
            SELECT setting_key, setting_value, category 
            FROM server_settings 
            ORDER BY category, setting_key
            LIMIT 10;
        `);
        
        if (settingsResult.rows.length > 0) {
            settingsResult.rows.forEach(setting => {
                console.log(`  [${setting.category}] ${setting.setting_key}: ${setting.setting_value}`);
            });
            if (settingsResult.rows.length === 10) {
                console.log('  ... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –Ω–∞—Å—Ç—Ä–æ–µ–∫)');
            }
        } else {
            console.log('  ‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã trust_level_applications
        console.log('\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã trust_level_applications:');
        const trustColumnsResult = await client.query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'trust_level_applications' 
            ORDER BY ordinal_position;
        `);
        
        if (trustColumnsResult.rows.length > 0) {
            trustColumnsResult.rows.forEach(row => {
                console.log(`  - ${row.column_name}: ${row.data_type} ${row.is_nullable === 'YES' ? '(nullable)' : '(not null)'}`);
            });
        } else {
            console.log('  ‚ùå –¢–∞–±–ª–∏—Ü–∞ trust_level_applications –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
        console.log('\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:');
        const usersColumnsResult = await client.query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'users' 
            ORDER BY ordinal_position;
        `);
        
        if (usersColumnsResult.rows.length > 0) {
            usersColumnsResult.rows.forEach(row => {
                console.log(`  - ${row.column_name}: ${row.data_type} ${row.is_nullable === 'YES' ? '(nullable)' : '(not null)'}`);
            });
        } else {
            console.log('  ‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        console.log('\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:');
        
        const appCountResult = await client.query('SELECT COUNT(*) FROM applications');
        console.log(`  - applications: ${appCountResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
        
        const trustCountResult = await client.query('SELECT COUNT(*) FROM trust_level_applications');
        console.log(`  - trust_level_applications: ${trustCountResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
        
        const usersCountResult = await client.query('SELECT COUNT(*) FROM users');
        console.log(`  - users: ${usersCountResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º user_reputation —Ç–∞–±–ª–∏—Ü—É
        try {
            const reputationColumnsResult = await client.query(`
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'user_reputation' 
                ORDER BY ordinal_position;
            `);
            
            if (reputationColumnsResult.rows.length > 0) {
                console.log('\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã user_reputation:');
                reputationColumnsResult.rows.forEach(row => {
                    console.log(`  - ${row.column_name}: ${row.data_type} ${row.is_nullable === 'YES' ? '(nullable)' : '(not null)'}`);
                });
            }
        } catch (err) {
            console.log('\n‚ùå –¢–∞–±–ª–∏—Ü–∞ user_reputation –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º player_stats —Ç–∞–±–ª–∏—Ü—É
        try {
            const statsColumnsResult = await client.query(`
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'player_stats' 
                ORDER BY ordinal_position;
            `);
            
            if (statsColumnsResult.rows.length > 0) {
                console.log('\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã player_stats:');
                statsColumnsResult.rows.forEach(row => {
                    console.log(`  - ${row.column_name}: ${row.data_type} ${row.is_nullable === 'YES' ? '(nullable)' : '(not null)'}`);
                });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ player_stats
                const statsCountResult = await client.query('SELECT COUNT(*) FROM player_stats');
                console.log(`\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ player_stats: ${statsCountResult.rows[0].count}`);
            }
        } catch (err) {
            console.log('\n‚ùå –¢–∞–±–ª–∏—Ü–∞ player_stats –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        
        
        client.release();
        console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        
        if (error.code === 'ECONNREFUSED') {
            console.error('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
            console.error('   - –ó–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL —Å–µ—Ä–≤–µ—Ä');
            console.error('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ');
        } else if (error.code === '28P01') {
            console.error('üí° –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –≤ .env —Ñ–∞–π–ª–µ');
        }
    } finally {
        await pool.end();
    }
}

checkDatabase();
