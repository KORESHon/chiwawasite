const axios = require('axios');

async function finalApiTest() {
    const token = 'f5b92bb14934744b58fb0745b7a462c2caea5069fba26edb7baa5fa95db68f7dbbe317333d5fb8826934262421723e52c96df15ef8b0f89bdd21025d2710e678';
    
    console.log('üîç –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç API —Ç–æ–∫–µ–Ω–∞ –¥–ª—è ChiwawaPlugin');
    console.log('==================================================');
    
    try {
        console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/plugin/server-info...');
        
        const response = await axios.get('http://localhost:3000/api/plugin/server-info', {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                'User-Agent': 'ChiwawaPlugin/1.0'
            }
        });
        
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
        console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!');
        console.log('');
        console.log('üìä –î–ê–ù–ù–´–ï –°–ï–†–í–ï–†–ê:');
        console.log('==================');
        
        const data = response.data;
        
        if (data.success) {
            console.log('üü¢ –°—Ç–∞—Ç—É—Å API:', '–£—Å–ø–µ—à–Ω–æ');
            console.log('üåê –°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω:', data.online ? '–î–∞' : '–ù–µ—Ç');
            
            if (data.server) {
                console.log('üè∑Ô∏è  –ù–∞–∑–≤–∞–Ω–∏–µ:', data.server.name);
                console.log('üåç IP –∞–¥—Ä–µ—Å:', `${data.server.ip}:${data.server.port}`);
                console.log('üéÆ –í–µ—Ä—Å–∏—è:', data.server.version);
                console.log('üí¨ MOTD:', data.server.motd);
            }
            
            if (data.performance) {
                console.log('‚ö° Ping:', `${data.performance.ping}ms`);
                console.log('üìà TPS:', data.performance.tps);
            }
            
            if (data.players) {
                console.log('üë• –ò–≥—Ä–æ–∫–∏:', `${data.players.online}/${data.players.max}`);
                
                if (data.players.list && data.players.list.length > 0) {
                    console.log('');
                    console.log('üë• –°–ü–ò–°–û–ö –ò–ì–†–û–ö–û–í:');
                    data.players.list.forEach((player, index) => {
                        console.log(`  ${index + 1}. ${player.name} (${player.role}) - Trust Level: ${player.trust_level}`);
                    });
                }
            }
            
            console.log('');
            console.log('üïê –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:', data.timestamp);
            console.log('üìã –í–µ—Ä—Å–∏—è API:', data.api_version);
        } else {
            console.log('‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
        console.log('');
        console.log('==================================================');
        console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
        console.log('');
        console.log('üìù –ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:');
        console.log('   ‚Ä¢ –ü–ª–∞–≥–∏–Ω –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞');
        console.log('   ‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log('   ‚Ä¢ –ù–æ–≤—ã–π endpoint /api/plugin/server-info —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
        console.log('   ‚Ä¢ –û–Ω–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –Ω–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π');
        console.log('');
        console.log('üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–≥–∏–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
        console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /chiwawa stats –≤ –∏–≥—Ä–µ');
        console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è');
        
    } catch (error) {
        console.log('‚ùå –û–®–ò–ë–ö–ê:', error.response ? error.response.data : error.message);
        console.log('üîß –°—Ç–∞—Ç—É—Å:', error.response ? error.response.status : '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞');
        
        if (error.response && error.response.status === 401) {
            console.log('üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —Ç–æ–∫–µ–Ω–∞');
        } else if (error.response && error.response.status === 404) {
            console.log('üîç Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
        }
    }
}

finalApiTest();
