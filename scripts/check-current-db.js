// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
    user: process.env.DB_USER || 'chiwawa',
    host: process.env.DB_HOST || '212.15.49.139',
    database: process.env.DB_NAME || 'chiwawa',
    password: process.env.DB_PASS,
    port: process.env.DB_PORT || 5432,
});

async function checkDatabase() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const client = await pool.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        console.log('\nüìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
        const tablesResult = await client.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name;
        `);
        
        tablesResult.rows.forEach(row => {
            console.log(`  - ${row.table_name}`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã applications
        console.log('\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã applications:');
        const appColumnsResult = await client.query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'applications' 
            ORDER BY ordinal_position;
        `);
        
        if (appColumnsResult.rows.length > 0) {
            appColumnsResult.rows.forEach(row => {
                console.log(`  - ${row.column_name}: ${row.data_type} ${row.is_nullable === 'YES' ? '(nullable)' : '(not null)'}`);
            });
        } else {
            console.log('  ‚ùå –¢–∞–±–ª–∏—Ü–∞ applications –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã trust_level_applications
        console.log('\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã trust_level_applications:');
        const trustColumnsResult = await client.query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'trust_level_applications' 
            ORDER BY ordinal_position;
        `);
        
        if (trustColumnsResult.rows.length > 0) {
            trustColumnsResult.rows.forEach(row => {
                console.log(`  - ${row.column_name}: ${row.data_type} ${row.is_nullable === 'YES' ? '(nullable)' : '(not null)'}`);
            });
        } else {
            console.log('  ‚ùå –¢–∞–±–ª–∏—Ü–∞ trust_level_applications –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
        console.log('\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:');
        const usersColumnsResult = await client.query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'users' 
            ORDER BY ordinal_position;
        `);
        
        if (usersColumnsResult.rows.length > 0) {
            usersColumnsResult.rows.forEach(row => {
                console.log(`  - ${row.column_name}: ${row.data_type} ${row.is_nullable === 'YES' ? '(nullable)' : '(not null)'}`);
            });
        } else {
            console.log('  ‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        console.log('\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:');
        
        const appCountResult = await client.query('SELECT COUNT(*) FROM applications');
        console.log(`  - applications: ${appCountResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
        
        const trustCountResult = await client.query('SELECT COUNT(*) FROM trust_level_applications');
        console.log(`  - trust_level_applications: ${trustCountResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
        
        const usersCountResult = await client.query('SELECT COUNT(*) FROM users');
        console.log(`  - users: ${usersCountResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º user_reputation —Ç–∞–±–ª–∏—Ü—É
        try {
            const reputationColumnsResult = await client.query(`
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'user_reputation' 
                ORDER BY ordinal_position;
            `);
            
            if (reputationColumnsResult.rows.length > 0) {
                console.log('\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã user_reputation:');
                reputationColumnsResult.rows.forEach(row => {
                    console.log(`  - ${row.column_name}: ${row.data_type} ${row.is_nullable === 'YES' ? '(nullable)' : '(not null)'}`);
                });
            }
        } catch (err) {
            console.log('\n‚ùå –¢–∞–±–ª–∏—Ü–∞ user_reputation –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º player_stats —Ç–∞–±–ª–∏—Ü—É
        try {
            const statsColumnsResult = await client.query(`
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'player_stats' 
                ORDER BY ordinal_position;
            `);
            
            if (statsColumnsResult.rows.length > 0) {
                console.log('\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã player_stats:');
                statsColumnsResult.rows.forEach(row => {
                    console.log(`  - ${row.column_name}: ${row.data_type} ${row.is_nullable === 'YES' ? '(nullable)' : '(not null)'}`);
                });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ player_stats
                const statsCountResult = await client.query('SELECT COUNT(*) FROM player_stats');
                console.log(`\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ player_stats: ${statsCountResult.rows[0].count}`);
            }
        } catch (err) {
            console.log('\n‚ùå –¢–∞–±–ª–∏—Ü–∞ player_stats –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        
        
        client.release();
        console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        
        if (error.code === 'ECONNREFUSED') {
            console.error('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
            console.error('   - –ó–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL —Å–µ—Ä–≤–µ—Ä');
            console.error('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ');
        } else if (error.code === '28P01') {
            console.error('üí° –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –≤ .env —Ñ–∞–π–ª–µ');
        }
    } finally {
        await pool.end();
    }
}

checkDatabase();
