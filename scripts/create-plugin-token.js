// –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ API —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞
// –°–æ–∑–¥–∞—Ç–µ–ª—å: GitHub Copilot

const axios = require('axios');

async function createPluginToken() {
    try {
        console.log('üîß –°–æ–∑–¥–∞–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π API —Ç–æ–∫–µ–Ω –¥–ª—è Minecraft –ø–ª–∞–≥–∏–Ω–∞...');
        
        // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
        const loginResponse = await axios.post('http://localhost:3000/api/auth/login', {
            email: 'dima2_05@mail.ru',
            password: 'Shadowfox555!'
        });
        
        if (loginResponse.status === 200) {
            const authToken = loginResponse.data.token;
            console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
            
            // –°–æ–∑–¥–∞–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞
            console.log('üé´ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...');
            const tokenResponse = await axios.post('http://localhost:3000/api/admin/api-tokens/plugin', {
                name: 'Minecraft Plugin Token (ChiwawaPlugin)'
            }, {
                headers: { 'Authorization': `Bearer ${authToken}` }
            });
            
            if (tokenResponse.status === 200) {
                const tokenData = tokenResponse.data.token;
                console.log('‚úÖ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
                console.log('');
                console.log('üé´ API –¢–û–ö–ï–ù –î–õ–Ø –ü–õ–ê–ì–ò–ù–ê:');
                console.log(tokenData.full_token);
                console.log('');
                console.log('üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò:');
                console.log('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –≤—ã—à–µ');
                console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ config.yml –ø–ª–∞–≥–∏–Ω–∞');
                console.log('3. –ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ admin_token –Ω–∞ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω');
                console.log('4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–ª–∞–≥–∏–Ω –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä');
                console.log('');
                console.log('‚ÑπÔ∏è  –û–°–û–ë–ï–ù–ù–û–°–¢–ò:');
                console.log('- –¢–æ–∫–µ–Ω –ù–ï –ò–°–¢–ï–ö–ê–ï–¢ (–±–µ—Å—Å—Ä–æ—á–Ω—ã–π)');
                console.log('- –¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –æ—Ç–æ–∑–≤–∞—Ç—å —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å');
                console.log('- –¢–æ–∫–µ–Ω –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞');
                console.log('');
                console.log(`üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ:`);
                console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${tokenData.name}`);
                console.log(`   ID: ${tokenData.id}`);
                console.log(`   –ü—Ä–µ—Ñ–∏–∫—Å: ${tokenData.prefix}...`);
                console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(tokenData.created_at).toLocaleString()}`);
                console.log(`   –ü—Ä–∞–≤–∞: ${tokenData.permissions.join(', ')}`);
                
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
            }
            
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
        
    } catch (error) {
        if (error.response) {
            console.error(`‚ùå HTTP Error ${error.response.status}:`, error.response.data);
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error.message);
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
createPluginToken();
