// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
// –°–æ–∑–¥–∞—Ç–µ–ª—å: ebluffy

require('dotenv').config();
const pool = require('../database/connection');

async function finalCheck() {
    try {
        console.log('üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...\n');

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ users:');
        const userColumns = await pool.query(`
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'users' 
            AND column_name IN ('discord_username', 'total_minutes', 'age', 'bio', 'avatar_url', 'ban_reason', 'ban_until')
            ORDER BY column_name
        `);
        
        userColumns.rows.forEach(col => {
            console.log(`  ‚úÖ ${col.column_name}: ${col.data_type}`);
        });

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
        console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü:');
        const requiredTables = ['users', 'applications', 'trust_level_applications', 'player_stats', 'game_sessions', 'discord_oauth'];
        
        for (const tableName of requiredTables) {
            const tableCheck = await pool.query(`
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_name = $1
            `, [tableName]);
            
            if (tableCheck.rows.length > 0) {
                console.log(`  ‚úÖ ${tableName}`);
            } else {
                console.log(`  ‚ùå ${tableName} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!`);
            }
        }

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É trust_level_applications
        console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –≤ trust_level_applications:');
        const tlaColumns = await pool.query(`
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'trust_level_applications'
            AND column_name IN ('submitted_at', 'reviewed_at')
            ORDER BY column_name
        `);
        
        tlaColumns.rows.forEach(col => {
            console.log(`  ‚úÖ ${col.column_name}: ${col.data_type}`);
        });

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥ger—ã
        console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥ger–æ–≤:');
        const triggers = await pool.query(`
            SELECT trigger_name, event_object_table 
            FROM information_schema.triggers 
            WHERE trigger_name IN ('trigger_check_ban_expiry', 'trigger_save_age_from_application', 'trigger_sync_user_total_minutes')
        `);
        
        triggers.rows.forEach(trigger => {
            console.log(`  ‚úÖ ${trigger.trigger_name} –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ ${trigger.event_object_table}`);
        });

        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π:');
        const functions = await pool.query(`
            SELECT routine_name 
            FROM information_schema.routines 
            WHERE routine_name IN ('check_ban_expiry', 'save_age_from_application', 'sync_user_total_minutes')
        `);
        
        functions.rows.forEach(func => {
            console.log(`  ‚úÖ ${func.routine_name}()`);
        });

        // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤:');
        
        try {
            // –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ admin.js
            await pool.query(`
                SELECT u.id, u.nickname, u.email, u.discord_username, u.trust_level 
                FROM users u 
                LIMIT 1
            `);
            console.log('  ‚úÖ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (admin.js)');
        } catch (error) {
            console.log('  ‚ùå –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (admin.js):', error.message);
        }

        try {
            // –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ daily_stats –∏–∑ profile.js (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
            await pool.query(`
                SELECT stat_date, playtime_minutes, blocks_broken 
                FROM daily_stats 
                WHERE user_id = 1 
                LIMIT 1
            `);
            console.log('  ‚úÖ –ó–∞–ø—Ä–æ—Å –∏–≥—Ä–æ–≤—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ (profile.js)');
        } catch (error) {
            console.log('  ‚ùå –ó–∞–ø—Ä–æ—Å –∏–≥—Ä–æ–≤—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ (profile.js):', error.message);
        }

        try {
            // –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ trust_level_applications
            await pool.query(`
                SELECT * FROM trust_level_applications 
                WHERE user_id = 1 
                ORDER BY submitted_at DESC 
                LIMIT 1
            `);
            console.log('  ‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è');
        } catch (error) {
            console.log('  ‚ùå –ó–∞–ø—Ä–æ—Å –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è:', error.message);
        }

        await pool.end();
        console.log('\nüéâ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
finalCheck();
