// –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è admin_logs
// –°–æ–∑–¥–∞—Ç–µ–ª—å: ebluffy

const { Pool } = require('pg');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
    user: process.env.DB_USER || 'chiwawa',
    host: process.env.DB_HOST || '212.15.49.139',
    database: process.env.DB_NAME || 'chiwawa',
    password: process.env.DB_PASS || 'mtU-PSM-cFP-2D6',
    port: process.env.DB_PORT || 5432,
    ssl: false
});

async function testAdminLogsFix() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è admin_logs...\n');

    try {
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã admin_logs
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã admin_logs...');
        const adminLogsColumns = await pool.query(`
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'admin_logs' 
            ORDER BY ordinal_position
        `);
        
        console.log('–°—Ç–æ–ª–±—Ü—ã admin_logs:');
        adminLogsColumns.rows.forEach(col => {
            console.log(`  - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`);
        });

        // –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è INSERT –≤ admin_logs —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ admin_logs...');
        try {
            await pool.query(`
                INSERT INTO admin_logs (admin_id, action, details, target_user_id)
                VALUES ($1, $2, $3, $4)
            `, [
                1, // admin_id
                'profile_update_test',
                '–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: –≤–æ–∑—Ä–∞—Å—Ç, –±–∏–æ–≥—Ä–∞—Ñ–∏—è',
                1 // target_user_id
            ]);
            console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ admin_logs –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');

            // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
            await pool.query(`
                DELETE FROM admin_logs 
                WHERE action = 'profile_update_test' AND admin_id = 1
            `);
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ admin_logs: ${error.message}`);
        }

        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ trust levels
        console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã Trust Levels...');
        function getTrustLevelName(level) {
            const names = {
                0: '–ü—Ä–æ—Ö–æ–¥–∏–º–µ—Ü',
                1: '–ù–æ–≤–∏—á–æ–∫', 
                2: '–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π',
                3: '–í–µ—Ç–µ—Ä–∞–Ω',
            };
            return names[level] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }

        function getTrustLevelRequirements(currentLevel) {
            const requirements = {
                0: { time: 0, name: '–ü—Ä–æ—Ö–æ–¥–∏–º–µ—Ü' },
                1: { time: 0, name: '–ù–æ–≤–∏—á–æ–∫' },
                2: { time: 25*60, name: '–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π' },
                3: { time: 50*60, name: '–í–µ—Ç–µ—Ä–∞–Ω' },
            };

            return requirements[currentLevel + 1] || { time: 0, name: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å' };
        }

        console.log('–°–∏—Å—Ç–µ–º–∞ Trust Levels (0-3):');
        const trustLevels = [0, 1, 2, 3];
        trustLevels.forEach(level => {
            const levelName = getTrustLevelName(level);
            const requirements = getTrustLevelRequirements(level);
            console.log(`  Level ${level}: ${levelName} ‚Üí –°–ª–µ–¥—É—é—â–∏–π: ${requirements.name}`);
        });

        // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Trust Level
        console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Trust Level...');
        const usersWithTrust = await pool.query(`
            SELECT nickname, trust_level, role
            FROM users 
            WHERE trust_level IS NOT NULL 
            ORDER BY trust_level DESC
            LIMIT 10
        `);

        if (usersWithTrust.rows.length > 0) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å Trust Level:');
            usersWithTrust.rows.forEach(user => {
                const levelName = getTrustLevelName(user.trust_level);
                console.log(`  - ${user.nickname}: Level ${user.trust_level} (${levelName}), –†–æ–ª—å: ${user.role}`);
            });
        } else {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Trust Level –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–æ–ª–µ–π vs trust levels
        console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –∏ Trust Levels...');
        const rolesCount = await pool.query(`
            SELECT role, COUNT(*) as count
            FROM users 
            WHERE is_active = true
            GROUP BY role
            ORDER BY count DESC
        `);

        console.log('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π:');
        rolesCount.rows.forEach(({ role, count }) => {
            console.log(`  - ${role || 'NULL'}: ${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        });

        const trustLevelsCount = await pool.query(`
            SELECT trust_level, COUNT(*) as count
            FROM users 
            WHERE is_active = true AND trust_level IS NOT NULL
            GROUP BY trust_level
            ORDER BY trust_level
        `);

        console.log('\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Trust Levels:');
        trustLevelsCount.rows.forEach(({ trust_level, count }) => {
            const levelName = getTrustLevelName(trust_level);
            console.log(`  - Level ${trust_level} (${levelName}): ${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        });

        console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testAdminLogsFix();
