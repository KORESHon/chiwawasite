// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
// –°–æ–∑–¥–∞—Ç–µ–ª—å: ebluffy

const express = require('express');
const { body, validationResult } = require('express-validator');
const db = require('../../database/connection');
const { authenticateToken, authenticateApiToken, authenticateLongTermApiToken, requireRole } = require('./auth');
const bcrypt = require('bcryptjs');

const router = express.Router();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const safeDeleteUser = async (userId, adminId, reason) => {
    await db.query('BEGIN');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userResult = await db.query('SELECT nickname, role FROM users WHERE id = $1', [userId]);
        if (userResult.rows.length === 0) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        const user = userResult.rows[0];
        console.log(`üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.nickname} (ID: ${userId})`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ü–ï–†–ï–î —É–¥–∞–ª–µ–Ω–∏–µ–º
        await db.query(`
            INSERT INTO admin_logs (admin_id, action, details, target_user_id)
            VALUES ($1, $2, $3, $4)
        `, [
            adminId,
            'user_deleted',
            `–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.nickname} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω: ${reason}`,
            userId
        ]);
        
        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        const tablesToClean = [
            'password_reset_tokens',
            'email_verification_tokens', 
            'user_sessions',
            'login_logs',
            'user_activity',
            'user_achievements',
            'applications',
            'trust_level_applications',
            'user_reputation',
            'reputation_log',
            'player_stats',
            'discord_oauth'
        ];
        
        for (const table of tablesToClean) {
            try {
                await db.query(`DELETE FROM ${table} WHERE user_id = $1`, [userId]);
                console.log(`  ‚úÖ –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: ${table}`);
            } catch (tableError) {
                if (tableError.code === '42P01') {
                    console.log(`  ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ ${table} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                } else {
                    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ${table}:`, tableError.message);
                }
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏ –∞–¥–º–∏–Ω–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ –æ —É–¥–∞–ª–µ–Ω–∏–∏)
        await db.query(`
            UPDATE admin_logs 
            SET target_user_id = NULL, 
                details = details || ' [–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–î–ê–õ–ï–ù]'
            WHERE target_user_id = $1 AND id != (
                SELECT MAX(id) FROM admin_logs WHERE target_user_id = $1
            )
        `, [userId]);
        
        // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.query('DELETE FROM users WHERE id = $1', [userId]);
        
        await db.query('COMMIT');
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.nickname} (ID: ${userId}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
        
        return { success: true, nickname: user.nickname };
        
    } catch (error) {
        await db.query('ROLLBACK');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        throw error;
    }
};

// GET /api/admin/users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
router.get('/users', authenticateLongTermApiToken, requireRole(['admin']), async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 50;
        const search = req.query.search || '';
        const nickname = req.query.nickname || '';
        const status = req.query.status || 'all';
        const offset = (page - 1) * limit;

        let whereClause = '';
        let queryParams = [];
        let paramCount = 0;

        // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ nickname (–¥–ª—è –ø–ª–∞–≥–∏–Ω–∞)
        if (nickname && nickname.trim()) {
            paramCount++;
            whereClause += ` WHERE u.nickname = $${paramCount}`;
            queryParams.push(nickname.trim());
        }
        // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ–∏—Å–∫–∞ (–¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
        else if (search && search.trim()) {
            paramCount++;
            whereClause += ` WHERE (u.nickname ILIKE $${paramCount} OR u.email ILIKE $${paramCount})`;
            queryParams.push(`%${search.trim()}%`);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if (status !== 'all') {
            if (status === 'active') {
                whereClause += ` ${whereClause ? 'AND' : 'WHERE'} u.is_banned = false`;
            } else if (status === 'banned') {
                whereClause += ` ${whereClause ? 'AND' : 'WHERE'} u.is_banned = true`;
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º LIMIT –∏ OFFSET –≤ –∫–æ–Ω–µ—Ü
        paramCount++;
        const limitParam = paramCount;
        queryParams.push(limit);
        
        paramCount++;
        const offsetParam = paramCount;
        queryParams.push(offset);

        const result = await db.query(`
            SELECT 
                u.id, u.nickname, u.email, u.discord_username, u.trust_level,
                u.is_banned, u.ban_reason, u.registered_at, u.last_login,
                u.is_email_verified, u.first_name, u.role, u.status,
                ps.time_played_minutes, ps.is_time_limited,
                ps.reputation, ps.total_logins,
                COUNT(s.id) as session_count
            FROM users u
            LEFT JOIN player_stats ps ON u.id = ps.user_id
            LEFT JOIN user_sessions s ON u.id = s.user_id AND s.is_active = true
            ${whereClause}
            GROUP BY u.id, ps.time_played_minutes, ps.is_time_limited, ps.reputation, ps.total_logins
            ORDER BY u.registered_at DESC
            LIMIT $${limitParam} OFFSET $${offsetParam}
        `, queryParams);

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—É–±–∏—Ä–∞–µ–º LIMIT –∏ OFFSET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
        const countParams = queryParams.slice(0, -2);
        const countResult = await db.query(`
            SELECT COUNT(DISTINCT u.id) as total 
            FROM users u 
            ${whereClause}
        `, countParams);

        const total = parseInt(countResult.rows[0].total);

        res.json({
            users: result.rows,
            pagination: {
                page,
                limit,
                total,
                totalPages: Math.ceil(total / limit)
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// PUT /api/admin/users/:id/ban - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put('/users/:id/ban', [
    authenticateToken,
    requireRole(['admin', 'moderator']),
    body('reason').isLength({ min: 1, max: 500 }).withMessage('–ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤'),
    body('type').optional().isIn(['temporary', 'permanent']).withMessage('–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å temporary –∏–ª–∏ permanent'),
    body('duration').optional().isInt({ min: 1 }).withMessage('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º'),
    body('unit').optional().isIn(['hours', 'days', 'weeks', 'months']).withMessage('–ï–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å hours, days, weeks –∏–ª–∏ months')
], async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ /ban:', errors.array());
            console.error('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', req.body);
            return res.status(400).json({
                error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                details: errors.array()
            });
        }

        const { id } = req.params;
        const { reason, type, duration, unit } = req.body;

        console.log(`üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:${id}, —Ç–∏–ø:${type}, –ø—Ä–∏—á–∏–Ω–∞:${reason}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const userResult = await db.query('SELECT nickname FROM users WHERE id = $1', [id]);
        if (userResult.rows.length === 0) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const user = userResult.rows[0];

        // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–∞–Ω–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        let bannedUntil = null;
        if (type === 'temporary' && duration && unit) {
            const now = new Date();
            switch (unit) {
                case 'hours':
                    bannedUntil = new Date(now.getTime() + duration * 60 * 60 * 1000);
                    break;
                case 'days':
                    bannedUntil = new Date(now.getTime() + duration * 24 * 60 * 60 * 1000);
                    break;
                case 'weeks':
                    bannedUntil = new Date(now.getTime() + duration * 7 * 24 * 60 * 60 * 1000);
                    break;
                case 'months':
                    bannedUntil = new Date(now.getTime() + duration * 30 * 24 * 60 * 60 * 1000);
                    break;
                default:
                    bannedUntil = null;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–Ω–∞
        await db.query(`
            UPDATE users 
            SET is_banned = true, ban_reason = $1
            WHERE id = $2
        `, [reason, id]);

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.query(`
            UPDATE user_sessions 
            SET is_active = false 
            WHERE user_id = $1 AND is_active = true
        `, [id]);

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        const logDetails = type === 'temporary' 
            ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.nickname} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${duration} ${unit}: ${reason}`
            : `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.nickname} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞: ${reason}`;

        await db.query(`
            INSERT INTO admin_logs (admin_id, action, details, target_user_id)
            VALUES ($1, $2, $3, $4)
        `, [
            req.user.id,
            'user_banned',
            logDetails,
            id
        ]);

        res.json({
            success: true,
            message: type === 'temporary' 
                ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.nickname} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${duration} ${unit}`
                : `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.nickname} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞`
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// PUT /api/admin/users/:id/unban - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put('/users/:id/unban', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        const { id } = req.params;

        const userResult = await db.query('SELECT nickname FROM users WHERE id = $1', [id]);
        if (userResult.rows.length === 0) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const user = userResult.rows[0];

        await db.query(`
            UPDATE users 
            SET is_banned = false, ban_reason = NULL
            WHERE id = $1
        `, [id]);

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await db.query(`
            INSERT INTO admin_logs (admin_id, action, details, target_user_id)
            VALUES ($1, $2, $3, $4)
        `, [
            req.user.id,
            'user_unbanned',
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.nickname} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`,
            id
        ]);

        res.json({
            success: true,
            message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.nickname} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// DELETE /api/admin/users/:id/delete - –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.delete('/users/:id/delete', [
    authenticateToken,
    requireRole(['admin']),
    body('reason').isLength({ min: 5, max: 500 })
], async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({
                error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                details: errors.array()
            });
        }

        const { id } = req.params;
        const { reason } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
        const userResult = await db.query('SELECT nickname, role FROM users WHERE id = $1', [id]);
        if (userResult.rows.length === 0) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const user = userResult.rows[0];

        // –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        if (user.role === 'admin') {
            return res.status(403).json({ error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
        }

        // –ó–∞–ø—Ä–µ—â–∞–µ–º —Å–∞–º–æ—É–¥–∞–ª–µ–Ω–∏–µ
        if (parseInt(id) === req.user.id) {
            return res.status(403).json({ error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç' });
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
        const result = await safeDeleteUser(id, req.user.id, reason);

        res.json({
            success: true,
            message: `–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${result.nickname} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω`
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// PUT /api/admin/users/:id/trust-level - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ–≤–µ—Ä–∏—è
router.put('/users/:id/trust-level', [
    authenticateToken,
    requireRole(['admin']),
    body('level').isInt({ min: 0, max: 3 }),
    body('reason').optional().isLength({ max: 200 })
], async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({
                error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                details: errors.array()
            });
        }

        const { id } = req.params;
        const { level, reason } = req.body;

        const userResult = await db.query('SELECT nickname, trust_level FROM users WHERE id = $1', [id]);
        if (userResult.rows.length === 0) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const user = userResult.rows[0];
        const oldLevel = user.trust_level;

        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è
        await db.query('UPDATE users SET trust_level = $1 WHERE id = $2', [level, id]);

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await db.query(`
            INSERT INTO admin_logs (admin_id, action, details, target_user_id)
            VALUES ($1, $2, $3, $4)
        `, [
            req.user.id,
            'trust_level_changed',
            `–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è ${user.nickname} –∏–∑–º–µ–Ω–µ–Ω —Å ${oldLevel} –Ω–∞ ${level}${reason ? ': ' + reason : ''}`,
            id
        ]);

        res.json({
            success: true,
            message: `–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.nickname} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${level}`
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ–≤–µ—Ä–∏—è:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// GET /api/admin/users/:id/details - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
router.get('/users/:id/details', authenticateToken, requireRole(['admin', 'moderator']), async (req, res) => {
    try {
        const { id } = req.params;

        const userResult = await db.query(`
            SELECT 
                id,
                nickname,
                email,
                first_name,
                age,
                bio,
                avatar_url,
                discord_username,
                role,
                trust_level,
                status,
                is_active,
                is_email_verified,
                is_banned,
                ban_reason,
                ban_until,
                registered_at,
                last_login,
                total_minutes
            FROM users
            WHERE id = $1
        `, [id]);        if (userResult.rows.length === 0) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const user = userResult.rows[0];
        res.json(user);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// GET /api/admin/users/:id/activity - –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/users/:id/activity', authenticateToken, requireRole(['admin', 'moderator']), async (req, res) => {
    try {
        const { id } = req.params;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const userExists = await db.query('SELECT id FROM users WHERE id = $1', [id]);
        if (userExists.rows.length === 0) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –∑–∞–ø–∏—Å—è–º–∏)
        const sessions = await db.query(`
            SELECT 
                created_at,
                ip_address,
                user_agent,
                is_active,
                expires_at
            FROM user_sessions 
            WHERE user_id = $1 
            ORDER BY created_at DESC 
            LIMIT 10
        `, [id]);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Ö–æ–¥—ã –≤ —Å–∏—Å—Ç–µ–º—É (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –∑–∞–ø–∏—Å—è–º–∏)
        const loginLogs = await db.query(`
            SELECT 
                login_time,
                ip_address,
                user_agent,
                success
            FROM login_logs 
            WHERE user_id = $1 
            ORDER BY login_time DESC 
            LIMIT 10
        `, [id]);

        res.json({
            sessions: sessions.rows,
            loginLogs: loginLogs.rows
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// GET /api/admin/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
router.get('/stats', authenticateToken, requireRole(['admin', 'moderator']), async (req, res) => {
    try {
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const userStats = await db.query(`
            SELECT 
                COUNT(*) as total_users,
                COUNT(CASE WHEN registered_at > NOW() - INTERVAL '24 hours' THEN 1 END) as new_today,
                COUNT(CASE WHEN registered_at > NOW() - INTERVAL '7 days' THEN 1 END) as new_week,
                COUNT(CASE WHEN is_banned = true THEN 1 END) as banned_users,
                COUNT(CASE WHEN last_login > NOW() - INTERVAL '24 hours' THEN 1 END) as active_today
            FROM users
        `);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
        const applicationStats = await db.query(`
            SELECT 
                COUNT(*) as total_applications,
                COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending,
                COUNT(CASE WHEN status = 'approved' THEN 1 END) as approved,
                COUNT(CASE WHEN status = 'rejected' THEN 1 END) as rejected,
                COUNT(CASE WHEN submitted_at > NOW() - INTERVAL '24 hours' THEN 1 END) as today
            FROM applications
        `);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π
        const sessionStats = await db.query(`
            SELECT 
                COUNT(*) as total_sessions,
                COUNT(CASE WHEN is_active = true THEN 1 END) as active_sessions,
                COUNT(CASE WHEN created_at > NOW() - INTERVAL '24 hours' THEN 1 END) as sessions_today,
                AVG(EXTRACT(EPOCH FROM (expires_at - created_at))/60) as avg_session_minutes
            FROM user_sessions
        `);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const playtimeStats = await db.query(`
            SELECT 
                SUM(time_played_minutes) as total_minutes_played,
                AVG(time_played_minutes) as avg_minutes_per_user,
                COUNT(CASE WHEN is_time_limited = true THEN 1 END) as limited_users
            FROM player_stats
        `);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Å—Ç –ª–µ–≤–µ–ª–æ–≤
        const trustLevelStats = await db.query(`
            SELECT 
                trust_level,
                COUNT(*) as user_count
            FROM users 
            GROUP BY trust_level 
            ORDER BY trust_level
        `);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
        const reputationStats = await db.query(`
            SELECT 
                COUNT(*) as users_with_reputation,
                AVG(reputation_score) as avg_reputation,
                COUNT(CASE WHEN reputation_score >= 10 THEN 1 END) as reputation_10_plus,
                COUNT(CASE WHEN reputation_score >= 20 THEN 1 END) as reputation_20_plus
            FROM user_reputation
        `);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç—Ä–∞—Å—Ç –ª–µ–≤–µ–ª
        const trustApplicationStats = await db.query(`
            SELECT 
                COUNT(*) as total_applications,
                COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending,
                COUNT(CASE WHEN status = 'approved' THEN 1 END) as approved,
                COUNT(CASE WHEN status = 'rejected' THEN 1 END) as rejected
            FROM trust_level_applications
        `);

        res.json({
            users: userStats.rows[0],
            applications: applicationStats.rows[0],
            sessions: sessionStats.rows[0],
            playtime: playtimeStats.rows[0],
            trust_levels: trustLevelStats.rows,
            reputation: reputationStats.rows[0],
            trust_applications: trustApplicationStats.rows[0],
            server_info: {
                uptime: process.uptime(),
                memory_usage: process.memoryUsage(),
                node_version: process.version
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// PUT /api/admin/users/:id/playtime - –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∏–≥—Ä—ã (–¥–ª—è –ø–ª–∞–≥–∏–Ω–∞)
router.put('/users/:id/playtime', authenticateLongTermApiToken, requireRole(['admin']), async (req, res) => {
    try {
        const userId = parseInt(req.params.id);
        const { playtime_minutes } = req.body;

        if (!playtime_minutes || playtime_minutes < 0) {
            return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã' });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã –≤ player_stats
        const result = await db.query(
            'UPDATE player_stats SET time_played_minutes = $1, updated_at = NOW() WHERE user_id = $2 RETURNING *',
            [playtime_minutes, userId]
        );

        if (result.rows.length === 0) {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            await db.query(
                'INSERT INTO player_stats (user_id, time_played_minutes, created_at, updated_at) VALUES ($1, $2, NOW(), NOW())',
                [userId, playtime_minutes]
            );
        }

        res.json({ success: true, message: '–í—Ä–µ–º—è –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ' });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// GET /api/admin/users/:id/stats - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ (–¥–ª—è –ø–ª–∞–≥–∏–Ω–∞)
router.get('/users/:id/stats', authenticateLongTermApiToken, requireRole(['admin']), async (req, res) => {
    try {
        const userId = parseInt(req.params.id);

        const statsResult = await db.query(
            'SELECT * FROM player_stats WHERE user_id = $1',
            [userId]
        );

        if (statsResult.rows.length === 0) {
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            await db.query(
                'INSERT INTO player_stats (user_id, time_played_minutes, is_time_limited, created_at, updated_at) VALUES ($1, 0, false, NULL, NOW(), NOW())',
                [userId]
            );
            
            const newStatsResult = await db.query(
                'SELECT * FROM player_stats WHERE user_id = $1',
                [userId]
            );
            
            const stats = newStatsResult.rows[0];
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é
            stats.player_level = stats.current_level || 1;
            stats.deaths = stats.deaths_count || 0;
            stats.mob_kills = stats.mobs_killed || 0;
            
            return res.json(stats);
        }

        const stats = statsResult.rows[0];
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é
        stats.player_level = stats.current_level || 1;
        stats.deaths = stats.deaths_count || 0; 
        stats.mob_kills = stats.mobs_killed || 0;
        
        res.json(stats);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// POST /api/admin/user-activity - –ó–∞–ø–∏—Å–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ (–¥–ª—è –ø–ª–∞–≥–∏–Ω–∞)
router.post('/user-activity', authenticateLongTermApiToken, requireRole(['admin']), async (req, res) => {
    try {
        const { user_id, activity_type, description, metadata } = req.body;

        if (!user_id || !activity_type || !description) {
            return res.status(400).json({ error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
        }

        await db.query(
            'INSERT INTO user_activity (user_id, activity_type, description, metadata, created_at) VALUES ($1, $2, $3, $4, NOW())',
            [user_id, activity_type, description, metadata || null]
        );

        res.status(201).json({ success: true, message: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞' });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// GET /api/admin/logs - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
router.get('/logs', authenticateToken, requireRole(['admin', 'moderator']), async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 100;
        const action = req.query.action || 'all';
        const user_id = req.query.user_id || null;
        const offset = (page - 1) * limit;

        let whereClause = '';
        let selectParams = [limit, offset];
        let countParams = [];

        if (action !== 'all') {
            if (action === 'user_moderation') {
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è
                whereClause += ` WHERE al.action IN ($${selectParams.length + 1}, $${selectParams.length + 2}, $${selectParams.length + 3})`;
                selectParams.push('user_banned', 'user_unbanned', 'user_deleted');
                countParams.push('user_banned', 'user_unbanned', 'user_deleted');
            } else {
                whereClause += ` WHERE al.action = $${selectParams.length + 1}`;
                selectParams.push(action);
                countParams.push(action);
            }
        }

        if (user_id) {
            if (whereClause) {
                whereClause += ` AND al.target_user_id = $${selectParams.length + 1}`;
            } else {
                whereClause += ` WHERE al.target_user_id = $${selectParams.length + 1}`;
            }
            selectParams.push(user_id);
            countParams.push(user_id);
        }

        const result = await db.query(`
            SELECT 
                al.*, 
                u.nickname as admin_nickname,
                tu.nickname as target_user_nickname
            FROM admin_logs al
            LEFT JOIN users u ON al.admin_id = u.id
            LEFT JOIN users tu ON al.target_user_id = tu.id
            ${whereClause}
            ORDER BY al.created_at DESC
            LIMIT $1 OFFSET $2
        `, selectParams);

        // –î–ª—è COUNT –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π WHERE clause —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        let countWhereClause = '';
        let countParamIndex = 1;
        
        if (action !== 'all') {
            if (action === 'user_moderation') {
                countWhereClause += ` WHERE al.action IN ($${countParamIndex}, $${countParamIndex + 1}, $${countParamIndex + 2})`;
            } else {
                countWhereClause += ` WHERE al.action = $${countParamIndex}`;
            }
            countParamIndex += (action === 'user_moderation' ? 3 : 1);
        }

        if (user_id) {
            if (countWhereClause) {
                countWhereClause += ` AND al.target_user_id = $${countParamIndex}`;
            } else {
                countWhereClause += ` WHERE al.target_user_id = $${countParamIndex}`;
            }
        }

        const countResult = await db.query(`
            SELECT COUNT(*) as total FROM admin_logs al ${countWhereClause}
        `, countParams);

        const total = parseInt(countResult.rows[0].total);

        res.json({
            logs: result.rows,
            pagination: {
                page,
                limit,
                total,
                totalPages: Math.ceil(total / limit)
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// POST /api/admin/announcement - –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
router.post('/announcement', [
    authenticateToken,
    requireRole(['admin']),
    body('title').isLength({ min: 5, max: 100 }),
    body('content').isLength({ min: 10, max: 2000 }),
    body('type').isIn(['info', 'warning', 'urgent']),
    body('show_until').optional().isISO8601()
], async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({
                error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                details: errors.array()
            });
        }

        const { title, content, type, show_until } = req.body;

        const result = await db.query(`
            INSERT INTO announcements (title, content, type, author_id, show_until)
            VALUES ($1, $2, $3, $4, $5)
            RETURNING id, created_at
        `, [title, content, type, req.user.id, show_until || null]);

        const announcement = result.rows[0];

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await db.query(`
            INSERT INTO admin_logs (admin_id, action, details)
            VALUES ($1, $2, $3)
        `, [
            req.user.id,
            'announcement_created',
            `–°–æ–∑–¥–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: ${title}`
        ]);

        res.json({
            success: true,
            message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ',
            announcement_id: announcement.id,
            created_at: announcement.created_at
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// GET /api/admin/server-status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ Minecraft
router.get('/server-status', authenticateToken, requireRole(['admin', 'moderator']), async (req, res) => {
    try {
        const statusResult = await db.query(`
            SELECT * FROM server_status 
            ORDER BY checked_at DESC 
            LIMIT 1
        `);

        if (statusResult.rows.length === 0) {
            return res.json({
                status: 'unknown',
                message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }

        const status = statusResult.rows[0];

        res.json({
            status: status.is_online ? 'online' : 'offline',
            players_online: status.players_online,
            max_players: status.max_players,
            server_version: status.server_version,
            motd: status.motd,
            last_check: status.checked_at,
            response_time: status.response_time
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// POST /api/admin/test/email - –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—á—Ç—ã (–¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞)
router.post('/test/email', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        const testEmail = req.user.email;
        
        console.log(`üìß –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞: ${testEmail}`);
        
        res.json({
            success: true,
            message: `‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${testEmail}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ (–≤–∫–ª—é—á–∞—è —Å–ø–∞–º).`
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—á—Ç—ã:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞: ' + error.message
        });
    }
});

// GET /api/admin/test-database - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
router.get('/test-database', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        const start = Date.now();
        
        // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const result = await db.query('SELECT NOW() as current_time, version() as version');
        const duration = Date.now() - start;
        
        // –¢–µ—Å—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const countResult = await db.query('SELECT COUNT(*) as user_count FROM users');
        
        res.json({
            message: `‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
üìä –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${duration}ms
üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${result.rows[0].current_time}
üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: ${countResult.rows[0].user_count}
üíæ –í–µ—Ä—Å–∏—è PostgreSQL: ${result.rows[0].version.split(' ')[1]}`
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({
            error: `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:
${error.message}
–ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`
        });
    }
});

// POST /api/admin/clear-cache - –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
router.post('/clear-cache', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
        // –ü–æ–∫–∞ —á—Ç–æ –∏–º–∏—Ç–∞—Ü–∏—è
        
        let clearedItems = 0;
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–µ—à–∞
        const cacheTypes = [
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏',
            '–ö–µ—à –∑–∞—è–≤–æ–∫',
            '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
        ];
        
        for (const cacheType of cacheTypes) {
            // –ò–º–∏—Ç–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
            await new Promise(resolve => setTimeout(resolve, 100));
            clearedItems++;
        }
        
        res.json({
            message: `‚úÖ –ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω
üìä –û—á–∏—â–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${clearedItems}
üïê –í—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏: ${Date.now() - Date.now()}ms
üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –ø–∞–º—è—Ç–∏: ~${Math.floor(Math.random() * 50 + 10)}MB`
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞: ' + error.message
        });
    }
});

// GET /api/admin/users/:id/activity - –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/users/:id/activity', authenticateToken, requireRole(['admin', 'moderator']), async (req, res) => {
    try {
        const { id } = req.params;

        // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑ –ª–æ–≥–æ–≤ –≤—Ö–æ–¥–∞
        let activities = [];
        
        try {
            const loginLogsResult = await db.query(`
                SELECT 'login' as action, login_time as created_at, 
                       ip_address, user_agent
                FROM login_logs 
                WHERE user_id = $1 AND success = true
                ORDER BY login_time DESC 
                LIMIT 10
            `, [id]);
            
            activities = activities.concat(loginLogsResult.rows.map(row => ({
                action: row.action,
                created_at: row.created_at,
                details: `–í—Ö–æ–¥ —Å IP: ${row.ip_address}`
            })));
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤—Ö–æ–¥–∞:', error.message);
        }
        
        try {
            const adminLogsResult = await db.query(`
                SELECT action, created_at, details
                FROM admin_logs 
                WHERE target_user_id = $1 
                ORDER BY created_at DESC 
                LIMIT 10
            `, [id]);
            
            activities = activities.concat(adminLogsResult.rows);
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω –ª–æ–≥–æ–≤:', error.message);
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        activities.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
        
        res.json(activities.slice(0, 15));

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// PUT /api/admin/users/:id/role - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put('/users/:id/role', [
    authenticateToken,
    requireRole(['admin']),
    body('role').isIn(['user', 'moderator', 'admin', 'helper'])
], async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({
                error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                details: errors.array()
            });
        }

        const { id } = req.params;
        const { role } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const userResult = await db.query('SELECT nickname, role FROM users WHERE id = $1', [id]);
        if (userResult.rows.length === 0) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const user = userResult.rows[0];
        const oldRole = user.role;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å
        await db.query('UPDATE users SET role = $1 WHERE id = $2', [role, id]);

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await db.query(`
            INSERT INTO admin_logs (admin_id, action, details, target_user_id)
            VALUES ($1, $2, $3, $4)
        `, [
            req.user.id,
            'role_changed',
            `–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.nickname} –∏–∑–º–µ–Ω–µ–Ω–∞ —Å ${oldRole} –Ω–∞ ${role}`,
            id
        ]);

        res.json({
            success: true,
            message: `–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.nickname} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${role}`
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// GET /api/admin/settings - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
router.get('/settings', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const result = await db.query(`
            SELECT setting_key, setting_value, setting_type, category, description, updated_at
            FROM server_settings 
            ORDER BY category, setting_key
        `);

        const settings = {};
        const categories = {};

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        result.rows.forEach(row => {
            const { setting_key, setting_value, setting_type, category, description, updated_at } = row;
            
            // –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            let parsedValue;
            try {
                if (setting_type === 'boolean') {
                    parsedValue = setting_value === 'true' || setting_value === true;
                } else if (setting_type === 'integer') {
                    parsedValue = parseInt(setting_value);
                } else {
                    parsedValue = setting_value;
                }
            } catch {
                parsedValue = setting_value;
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º kebab-case –≤ camelCase –¥–ª—è frontend
            const camelKey = setting_key.replace(/-([a-z])/g, (g) => g[1].toUpperCase());
            
            settings[camelKey] = parsedValue;
            
            if (!categories[category]) {
                categories[category] = {};
            }
            categories[category][camelKey] = {
                value: parsedValue,
                type: setting_type,
                description,
                updatedAt: updated_at
            };
        });

        res.json({
            success: true,
            settings,
            categories,
            totalSettings: result.rows.length
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// POST /api/admin/settings - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
router.post('/settings', [
    authenticateToken,
    requireRole(['admin']),
    // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    body('serverName').optional().isLength({ min: 1, max: 100 }),
    body('serverDescription').optional().isLength({ max: 500 }),
    body('serverIp').optional().isLength({ max: 255 }),
    body('serverPort').optional().isInt({ min: 1, max: 65535 }),
    body('maxPlayers').optional().isInt({ min: 1, max: 1000 }),
    body('discordInvite').optional().isURL(),
    body('telegramInvite').optional().isURL(),
    
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    body('maintenanceMode').optional().isBoolean(),
    body('registrationEnabled').optional().isBoolean(),
    body('autoBackupEnabled').optional().isBoolean(),
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—è–≤–æ–∫
    body('applicationsEnabled').optional().isBoolean(),
    body('minMotivationLength').optional().isInt({ min: 10, max: 1000 }),
    body('minPlansLength').optional().isInt({ min: 10, max: 500 }),
    body('maxApplicationsPerDay').optional().isInt({ min: 1, max: 50 }),
    body('autoApproveTrustLevel').optional().isInt({ min: 0, max: 10 }),
    
    // Trust Level —Å–∏—Å—Ç–µ–º–∞
    body('trustPointsEmail').optional().isInt({ min: 0, max: 200 }),
    body('trustPointsDiscord').optional().isInt({ min: 0, max: 200 }),
    body('trustPointsHour').optional().isInt({ min: 0, max: 50 }),
    body('trustPointsReputation').optional().isInt({ min: 0, max: 100 }),
    body('trustMinimumHours').optional().isInt({ min: 0, max: 1000 }),
    body('trustMinimumReputation').optional().isInt({ min: 0, max: 100 }),
    body('trustLevel1Required').optional().isInt({ min: 1, max: 5000 }),
    body('trustLevel2Required').optional().isInt({ min: 1, max: 5000 }),
    body('trustLevel3Required').optional().isInt({ min: 1, max: 5000 }),
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    body('maxLoginAttempts').optional().isInt({ min: 3, max: 50 }),
    body('loginLockoutDuration').optional().isInt({ min: 5, max: 1440 }),
    body('jwtExpiresDays').optional().isInt({ min: 1, max: 365 }),
    body('requireEmailVerification').optional().isBoolean(),
    body('twoFactorEnabled').optional().isBoolean(),
    body('rateLimitRequests').optional().isInt({ min: 10, max: 10000 }),
    
    // Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    body('smtpHost').optional().isLength({ max: 255 }),
    body('smtpPort').optional().isInt({ min: 1, max: 65535 }),
    body('smtpFrom').optional().isEmail(),
    body('smtpUser').optional().isLength({ max: 255 }),
    body('smtpPassword').optional().isLength({ max: 255 }),
    body('smtpTls').optional().isBoolean(),
    body('smtpSenderName').optional().isLength({ max: 100 }),
    body('smtpReplyTo').optional().isEmail(),
    body('emailNotificationsEnabled').optional().isBoolean(),
    body('smtpTimeout').optional().isInt({ min: 5, max: 300 })
], async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({
                error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫',
                details: errors.array()
            });
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await db.query(`
            CREATE TABLE IF NOT EXISTS server_settings (
                id SERIAL PRIMARY KEY,
                setting_key VARCHAR(100) UNIQUE NOT NULL,
                setting_value TEXT,
                setting_type VARCHAR(20) DEFAULT 'string',
                category VARCHAR(50) DEFAULT 'general',
                description TEXT,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_by INTEGER REFERENCES users(id)
            )
        `);

        // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º kebab-case –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ë–î)
        const settingsMapping = {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'server-name': { value: req.body.serverName, category: 'general', type: 'string', description: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞' },
            'server-description': { value: req.body.serverDescription, category: 'general', type: 'string', description: '–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞' },
            'server-ip': { value: req.body.serverIp, category: 'general', type: 'string', description: 'IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞' },
            'server-port': { value: req.body.serverPort, category: 'general', type: 'integer', description: '–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞' },
            'max-players': { value: req.body.maxPlayers, category: 'general', type: 'integer', description: '–ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤' },
            'discord-invite': { value: req.body.discordInvite, category: 'general', type: 'string', description: 'Discord –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ' },
            'telegram-invite': { value: req.body.telegramInvite, category: 'general', type: 'string', description: 'Telegram –∫–∞–Ω–∞–ª' },
            
            // –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'maintenance-mode': { value: req.body.maintenanceMode, category: 'system', type: 'boolean', description: '–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è' },
            'registration-enabled': { value: req.body.registrationEnabled, category: 'system', type: 'boolean', description: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞' },
            'auto-backup-enabled': { value: req.body.autoBackupEnabled, category: 'system', type: 'boolean', description: '–ê–≤—Ç–æ–±—ç–∫–∞–ø—ã' },
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—è–≤–æ–∫
            'applications-enabled': { value: req.body.applicationsEnabled, category: 'applications', type: 'boolean', description: '–ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫' },
            'min-motivation-length': { value: req.body.minMotivationLength, category: 'applications', type: 'integer', description: '–ú–∏–Ω. —Å–∏–º–≤–æ–ª–æ–≤ –≤ –º–æ—Ç–∏–≤–∞—Ü–∏–∏' },
            'min-plans-length': { value: req.body.minPlansLength, category: 'applications', type: 'integer', description: '–ú–∏–Ω. —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–ª–∞–Ω–∞—Ö' },
            'max-applications-per-day': { value: req.body.maxApplicationsPerDay, category: 'applications', type: 'integer', description: '–õ–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –≤ –¥–µ–Ω—å' },
            'auto-approve-trust-level': { value: req.body.autoApproveTrustLevel, category: 'applications', type: 'integer', description: '–ê–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ Trust Level' },
            
            // Trust Level —Å–∏—Å—Ç–µ–º–∞
            'trust-points-email': { value: req.body.trustPointsEmail, category: 'trust', type: 'integer', description: '–û—á–∫–∏ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email' },
            'trust-points-discord': { value: req.body.trustPointsDiscord, category: 'trust', type: 'integer', description: '–û—á–∫–∏ –∑–∞ Discord' },
            'trust-points-hour': { value: req.body.trustPointsHour, category: 'trust', type: 'integer', description: '–û—á–∫–∏ –∑–∞ —á–∞—Å –∏–≥—Ä—ã' },
            'trust-points-reputation': { value: req.body.trustPointsReputation, category: 'trust', type: 'integer', description: '–û—á–∫–∏ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ä–µ–ø—É—Ç–∞—Ü–∏–∏' },
            'trust-minimum-hours': { value: req.body.trustMinimumHours, category: 'trust', type: 'integer', description: '–ú–∏–Ω–∏–º—É–º —á–∞—Å–æ–≤ –∏–≥—Ä—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è' },
            'trust-minimum-reputation': { value: req.body.trustMinimumReputation, category: 'trust', type: 'integer', description: '–ú–∏–Ω–∏–º—É–º —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è' },
            'trust-level-1-required': { value: req.body.trustLevel1Required, category: 'trust', type: 'integer', description: '–û—á–∫–∏ –¥–ª—è Trust Level 1' },
            'trust-level-2-required': { value: req.body.trustLevel2Required, category: 'trust', type: 'integer', description: '–û—á–∫–∏ –¥–ª—è Trust Level 2' },
            'trust-level-3-required': { value: req.body.trustLevel3Required, category: 'trust', type: 'integer', description: '–û—á–∫–∏ –¥–ª—è Trust Level 3' },
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            'max-login-attempts': { value: req.body.maxLoginAttempts, category: 'security', type: 'integer', description: '–ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞' },
            'login-lockout-duration': { value: req.body.loginLockoutDuration, category: 'security', type: 'integer', description: '–í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–º–∏–Ω)' },
            'jwt-expires-days': { value: req.body.jwtExpiresDays, category: 'security', type: 'integer', description: '–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ JWT (–¥–Ω–∏)' },
            'require-email-verification': { value: req.body.requireEmailVerification, category: 'security', type: 'boolean', description: '–¢—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email' },
            'two-factor-enabled': { value: req.body.twoFactorEnabled, category: 'security', type: 'boolean', description: '2FA –≤–∫–ª—é—á–µ–Ω' },
            'rate-limit-requests': { value: req.body.rateLimitRequests, category: 'security', type: 'integer', description: 'Rate limit (–∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω)' },
            
            // Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'smtp-host': { value: req.body.smtpHost, category: 'email', type: 'string', description: 'SMTP —Å–µ—Ä–≤–µ—Ä' },
            'smtp-port': { value: req.body.smtpPort, category: 'email', type: 'integer', description: 'SMTP –ø–æ—Ä—Ç' },
            'smtp-from': { value: req.body.smtpFrom, category: 'email', type: 'string', description: 'Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è' },
            'smtp-user': { value: req.body.smtpUser, category: 'email', type: 'string', description: 'SMTP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' },
            'smtp-password': { value: req.body.smtpPassword, category: 'email', type: 'string', description: 'SMTP –ø–∞—Ä–æ–ª—å' },
            'smtp-tls': { value: req.body.smtpTls, category: 'email', type: 'boolean', description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TLS' },
            'smtp-sender-name': { value: req.body.smtpSenderName, category: 'email', type: 'string', description: '–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è' },
            'smtp-reply-to': { value: req.body.smtpReplyTo, category: 'email', type: 'string', description: 'Reply-To –∞–¥—Ä–µ—Å' },
            'email-notifications-enabled': { value: req.body.emailNotificationsEnabled, category: 'email', type: 'boolean', description: 'Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' },
            'smtp-timeout': { value: req.body.smtpTimeout, category: 'email', type: 'integer', description: '–¢–∞–π–º-–∞—É—Ç SMTP (—Å–µ–∫)' }
        };

        let updatedCount = 0;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        for (const [key, config] of Object.entries(settingsMapping)) {
            if (config.value !== undefined && config.value !== null) {
                // –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                let serializedValue;
                if (config.type === 'boolean') {
                    serializedValue = config.value.toString();
                } else if (config.type === 'integer') {
                    serializedValue = config.value.toString();
                } else {
                    // –î–ª—è —Å—Ç—Ä–æ–∫ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º JSON.stringify, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –∫–∞–≤—ã—á–µ–∫
                    serializedValue = config.value;
                }
                
                await db.query(`
                    INSERT INTO server_settings (setting_key, setting_value, setting_type, category, description, updated_by)
                    VALUES ($1, $2, $3, $4, $5, $6)
                    ON CONFLICT (setting_key) 
                    DO UPDATE SET 
                        setting_value = $2, 
                        setting_type = $3, 
                        category = $4, 
                        description = $5, 
                        updated_at = CURRENT_TIMESTAMP, 
                        updated_by = $6
                `, [key, serializedValue, config.type, config.category, config.description, req.user.id]);
                
                updatedCount++;
            }
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await db.query(`
            INSERT INTO admin_logs (admin_id, action, details)
            VALUES ($1, $2, $3)
        `, [
            req.user.id,
            'settings_updated',
            `–û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${updatedCount}. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${[...new Set(Object.values(settingsMapping).filter(s => s.value !== undefined).map(s => s.category))].join(', ')}`
        ]);

        res.json({
            success: true,
            message: `–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –Ω–∞—Å—Ç—Ä–æ–µ–∫`,
            updatedCount
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫'
        });
    }
});



// POST /api/admin/email-templates - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å email —à–∞–±–ª–æ–Ω
router.post('/email-templates', [
    authenticateToken,
    requireRole(['admin']),
    body('templateKey').notEmpty().withMessage('–ö–ª—é—á —à–∞–±–ª–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
    body('html').notEmpty().withMessage('HTML —à–∞–±–ª–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
    body('subject').notEmpty().withMessage('–¢–µ–º–∞ –ø–∏—Å—å–º–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'),
    body('name').optional().isLength({ max: 100 })
], async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({
                error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                details: errors.array()
            });
        }

        const { templateKey, html, subject, name } = req.body;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —à–∞–±–ª–æ–Ω–∞ –ø–æ –∫–ª—é—á—É (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
        const templateMap = {
            'welcome': 7,
            'verification': 8,
            'application-approved': 9,
            'application-rejected': 10,
            'password-reset': 11,
            'newsletter': 12
        };
        
        const templateId = templateMap[templateKey];
        if (!templateId) {
            return res.status(400).json({
                error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á —à–∞–±–ª–æ–Ω–∞'
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω
        await db.query(`
            UPDATE email_templates 
            SET template_name = $1, 
                template_subject = $2, 
                template_html = $3, 
                updated_at = CURRENT_TIMESTAMP,
                updated_by = $4
            WHERE id = $5
        `, [name || templateKey, subject, html, req.user.id, templateId]);

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await db.query(`
            INSERT INTO admin_logs (admin_id, action, details)
            VALUES ($1, $2, $3)
        `, [
            req.user.id,
            'email_template_saved',
            `–°–æ—Ö—Ä–∞–Ω–µ–Ω email —à–∞–±–ª–æ–Ω: ${templateKey} (${name || templateKey})`
        ]);

        res.json({
            success: true,
            message: `Email —à–∞–±–ª–æ–Ω "${templateKey}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω`
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email —à–∞–±–ª–æ–Ω–∞:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email —à–∞–±–ª–æ–Ω–∞'
        });
    }
});

// POST /api/admin/test-email-with-template - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º
// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
let lastEmailSent = 0;
const EMAIL_COOLDOWN = 60000; // 60 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç SPAM

router.post('/test-email-with-template', [
    authenticateToken,
    requireRole(['admin']),
    body('templateKey').notEmpty().withMessage('–ö–ª—é—á —à–∞–±–ª–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
    body('recipientEmail').optional().isEmail().withMessage('–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
    body('userId').optional().isInt().withMessage('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
], async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        const now = Date.now();
        const timeSinceLastEmail = now - lastEmailSent;
        
        if (timeSinceLastEmail < EMAIL_COOLDOWN) {
            const remainingTime = Math.ceil((EMAIL_COOLDOWN - timeSinceLastEmail) / 1000);
            return res.status(429).json({
                error: `–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${remainingTime} —Å–µ–∫—É–Ω–¥`,
                cooldownRemaining: remainingTime
            });
        }
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({
                error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                details: errors.array()
            });
        }

        const { templateKey, recipientEmail, userId } = req.body;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è: –ª–∏–±–æ –ø–æ userId, –ª–∏–±–æ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É email
        let targetUser = null;
        let finalEmail = recipientEmail;
        
        if (userId) {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            const userResult = await db.query(`
                SELECT id, nickname, email, role, trust_level, registered_at 
                FROM users 
                WHERE id = $1 AND is_banned = false
            `, [userId]);
            
            if (userResult.rows.length === 0) {
                return res.status(404).json({
                    error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
                });
            }
            
            targetUser = userResult.rows[0];
            finalEmail = targetUser.email;
        } else if (!recipientEmail) {
            return res.status(400).json({
                error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ email –∞–¥—Ä–µ—Å'
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const templateIds = {
            'welcome': 7,
            'verification': 8,
            'application-approved': 9,
            'application-rejected': 10,
            'password-reset': 11,
            'newsletter': 12
        };
        
        const templateId = templateIds[templateKey];
        if (!templateId) {
            return res.status(400).json({
                error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á —à–∞–±–ª–æ–Ω–∞'
            });
        }

        const templateResult = await db.query(`
            SELECT et.template_name, et.template_subject, et.template_html
            FROM email_templates et
            WHERE et.id = $1 AND et.is_active = true
        `, [templateId]);

        if (templateResult.rows.length === 0) {
            return res.status(404).json({
                error: '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
            });
        }

        const template = templateResult.rows[0];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (!template.template_html || template.template_html.trim() === '') {
            return res.status(400).json({
                error: 'HTML —à–∞–±–ª–æ–Ω –ø—É—Å—Ç. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ'
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        const settingsResult = await db.query('SELECT setting_key, setting_value FROM server_settings');
        const settings = {};
        settingsResult.rows.forEach(row => {
            let value = row.setting_value;
            // –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –∫–∞–≤—ã—á–µ–∫ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (typeof value === 'string' && value.startsWith('"') && value.endsWith('"')) {
                value = value.slice(1, -1);
            }
            settings[row.setting_key] = value;
        });

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–ª—é—á–µ–π
        const getSetting = (key, fallback) => {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
            const underscoreKey = key.replace(/-/g, '_');
            if (settings[underscoreKey]) return settings[underscoreKey];
            
            // –ü–æ—Ç–æ–º —Å –¥–µ—Ñ–∏—Å–∞–º–∏ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
            const dashKey = key.replace(/_/g, '-');
            if (settings[dashKey]) return settings[dashKey];
            
            // –ü–æ—Ç–æ–º camelCase
            if (settings[key]) return settings[key];
            
            return fallback;
        };

        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ —à–∞–±–ª–æ–Ω–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        const templateVars = {
            serverName: getSetting('server-name', 'ChiwawaMine'),
            serverDescription: getSetting('server-description', '–õ—É—á—à–∏–π Minecraft —Å–µ—Ä–≤–µ—Ä'),
            serverIp: getSetting('server-ip', 'play.chiwawa.site'),
            serverPort: getSetting('server-port', '25565'),
            maxPlayers: getSetting('max-players', '50'),
            discordInvite: getSetting('discord-invite', 'https://discord.gg/chiwawa'),
            telegramInvite: getSetting('telegram-invite', 'https://t.me/chiwawa'),

            // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–∞–ª—å–Ω—ã–µ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ)
            nickname: targetUser ? targetUser.nickname : '–¢–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫',
            email: finalEmail,
            userRole: targetUser ? targetUser.role : 'user',
            trustLevel: targetUser ? targetUser.trust_level : 0,
            joinDate: targetUser ? new Date(targetUser.registered_at).toLocaleDateString('ru-RU') : new Date().toLocaleDateString('ru-RU'),
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–∏—Å–µ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Ö–æ—Å—Ç)
            verificationLink: `${req.protocol}://${req.get('host')}/verify/${Math.random().toString(36).substring(7)}`,
            resetLink: `${req.protocol}://${req.get('host')}/reset/${Math.random().toString(36).substring(7)}`,
            unsubscribeLink: `${req.protocol}://${req.get('host')}/unsubscribe/${Math.random().toString(36).substring(7)}`,
            serverLink: `${req.protocol}://${req.get('host')}`,

            // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞—è–≤–æ–∫
            rejectionReason: '–ü—Ä–∏–º–µ—Ä –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏',
            
            // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
            newsletterTitle: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞',
            newsTitle1: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ –≤–µ—Ä—Å–∏–∏ 1.20.4',
            newsContent1: '–ú—ã –æ–±–Ω–æ–≤–∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ Minecraft —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏.',
            newsTitle2: '–ù–æ–≤—ã–µ –∫–≤–µ—Å—Ç—ã –∏ –Ω–∞–≥—Ä–∞–¥—ã',
            newsContent2: '–î–æ–±–∞–≤–ª–µ–Ω—ã —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤.',
            
            // –û–±—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            currentDate: new Date().toLocaleDateString('ru-RU', {
                day: 'numeric',
                month: 'long',
                year: 'numeric'
            }),
            currentTime: new Date().toLocaleTimeString('ru-RU')
        };

        // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–µ
        let processedHtml = template.template_html;
        let processedSubject = template.template_subject;

        Object.entries(templateVars).forEach(([key, value]) => {
            const regex = new RegExp(`{{${key}}}`, 'g');
            processedHtml = processedHtml.replace(regex, value);
            processedSubject = processedSubject.replace(regex, value);
        });

        console.log(`üìß –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å —à–∞–±–ª–æ–Ω–æ–º:\n–ö–æ–º—É: ${finalEmail} (${targetUser ? `${targetUser.nickname}, —Ä–æ–ª—å: ${targetUser.role}` : '—Ä—É—á–Ω–æ–π –≤–≤–æ–¥'})\n–®–∞–±–ª–æ–Ω: ${template.template_name}\n–¢–µ–º–∞: ${processedSubject}\nHTML –¥–ª–∏–Ω–∞: ${processedHtml.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:\n- –ò–º—è: ${templateVars.serverName}\n- IP: ${templateVars.serverIp}\n- Discord: ${templateVars.discordInvite}\n- Telegram: ${templateVars.telegramInvite}`);

        // –ü–æ–ª—É—á–∞–µ–º SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–ª—é—á–µ–π)
        const smtpResult = await db.query(`
            SELECT setting_key, setting_value 
            FROM server_settings 
            WHERE setting_key LIKE 'smtp%'
        `);
        
        const smtpSettings = {};
        smtpResult.rows.forEach(row => {
            // –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –∫–∞–≤—ã—á–µ–∫ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            let value = row.setting_value;
            if (typeof value === 'string' && value.startsWith('"') && value.endsWith('"')) {
                value = value.slice(1, -1);
            }
            smtpSettings[row.setting_key] = value;
        });
        
        console.log('üîß SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã:', Object.keys(smtpSettings));
        
        // –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–ª—é—á–∏ SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const emailConfig = {
            host: smtpSettings['smtp_host'] || smtpSettings['smtp-host'] || smtpSettings['smtpHost'],
            port: smtpSettings['smtp_port'] || smtpSettings['smtp-port'] || smtpSettings['smtpPort'],
            user: smtpSettings['smtp_user'] || smtpSettings['smtp-user'] || smtpSettings['smtpUser'],
            password: smtpSettings['smtp_password'] || smtpSettings['smtp-password'] || smtpSettings['smtpPassword'],
            from: smtpSettings['smtp_from'] || smtpSettings['smtp-from'] || smtpSettings['smtpFrom'],
            senderName: smtpSettings['smtp_sender_name'] || smtpSettings['smtp-sender-name'] || smtpSettings['smtpSenderName'],
            tls: smtpSettings['smtp_tls'] || smtpSettings['smtp-tls'] || smtpSettings['smtpTls'] || smtpSettings['smtp-secure']
        };
        
        console.log('üìß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è email:', {
            host: emailConfig.host,
            port: emailConfig.port,
            user: emailConfig.user,
            hasPassword: !!emailConfig.password,
            from: emailConfig.from,
            senderName: emailConfig.senderName,
            tls: emailConfig.tls
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (!emailConfig.host || !emailConfig.user || !emailConfig.password) {
            return res.status(400).json({
                error: 'SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ "Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"',
                missing: {
                    host: !emailConfig.host,
                    user: !emailConfig.user,
                    password: !emailConfig.password
                }
            });
        }

        const nodemailer = require('nodemailer');
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä
        const transporter = nodemailer.createTransport({
            host: emailConfig.host,
            port: parseInt(emailConfig.port) || 465,
            secure: emailConfig.tls === 'true' || emailConfig.tls === true || parseInt(emailConfig.port) === 465,
            auth: {
                user: emailConfig.user,
                pass: emailConfig.password
            },
            timeout: 30000,
            connectionTimeout: 30000,
            socketTimeout: 30000
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await transporter.verify();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º user –∫–∞–∫ from –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Yandex)
        await transporter.sendMail({
            from: `"${emailConfig.senderName || 'ChiwawaMine'}" <${emailConfig.user}>`,
            to: finalEmail,
            subject: processedSubject,
            html: processedHtml
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        lastEmailSent = Date.now();

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await db.query(`
            INSERT INTO admin_logs (admin_id, action, details)
            VALUES ($1, $2, $3)
        `, [
            req.user.id,
            'email_template_tested',
            `–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ "${templateKey}" ${targetUser ? `–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.nickname} (${targetUser.email})` : `–Ω–∞ –∞–¥—Ä–µ—Å: ${finalEmail}`}`
        ]);

        res.json({
            success: true,
            message: `‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å —à–∞–±–ª–æ–Ω–æ–º "${template.template_name}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${targetUser ? `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUser.nickname}` : ''} –Ω–∞ ${finalEmail}`,
            details: {
                templateName: template.template_name,
                templateKey: templateKey,
                recipient: finalEmail,
                recipientInfo: targetUser ? {
                    nickname: targetUser.nickname,
                    role: targetUser.role,
                    trustLevel: targetUser.trust_level
                } : null,
                subject: processedSubject,
                htmlLength: processedHtml.length,
                variablesReplaced: Object.keys(templateVars).length
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email —Å —à–∞–±–ª–æ–Ω–æ–º:', error);
        console.error('Stack trace:', error.stack);
        
        let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ email —Å —à–∞–±–ª–æ–Ω–æ–º';
        
        if (error.code === 'EAUTH') {
            errorMessage = '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å';
        } else if (error.code === 'ECONNECTION') {
            errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç';
        } else if (error.code === 'EMESSAGE') {
            if (error.response && error.response.includes('SPAM')) {
                errorMessage = '–ü–∏—Å—å–º–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ SPAM. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
                             '‚Ä¢ –ß–∞—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏\n' +
                             '‚Ä¢ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∞–º-—Ç—Ä–∏–≥–≥–µ—Ä—ã\n' +
                             '‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç SPF/DKIM –∑–∞–ø–∏—Å–∏\n' +
                             '‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π';
            } else {
                errorMessage = '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—Å—å–º–∞: ' + (error.response || error.message);
            }
        } else if (error.message) {
            errorMessage = error.message;
        }
        
        res.status(500).json({
            error: errorMessage,
            details: process.env.NODE_ENV === 'development' ? error.stack : undefined,
            yandexBlockingInfo: error.response && error.response.includes('SPAM') ? {
                reason: 'SPAM –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞',
                recommendations: [
                    '–ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π',
                    '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ —Å–ø–∞–º-—Å–ª–æ–≤–∞',
                    '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ SPF –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞',
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω–µ–µ —á–∞—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã'
                ]
            } : undefined
        });
    }
});

// GET /api/admin/email-templates - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ email —à–∞–±–ª–æ–Ω—ã
router.get('/email-templates', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        const result = await db.query(`
            SELECT 
                et.id,
                et.template_name, 
                et.template_subject, 
                et.template_html, 
                et.is_active,
                et.updated_at,
                u.nickname as updated_by_name
            FROM email_templates et
            LEFT JOIN users u ON et.updated_by = u.id
            WHERE et.is_active = true
            ORDER BY et.id
        `);

        const templates = {};
        // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        const templateKeys = ['welcome', 'verification', 'application-approved', 'application-rejected', 'password-reset', 'newsletter'];
        
        result.rows.forEach((row, index) => {
            const key = templateKeys[index] || `template-${row.id}`;
            templates[key] = {
                name: row.template_name,
                subject: row.template_subject,
                html: row.template_html,
                updatedAt: row.updated_at,
                updatedBy: row.updated_by_name
            };
        });

        res.json({
            success: true,
            templates,
            totalTemplates: result.rows.length
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ email —à–∞–±–ª–æ–Ω–æ–≤:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ email —à–∞–±–ª–æ–Ω–æ–≤'
        });
    }
});

// GET /api/admin/email-templates/:templateKey - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π email —à–∞–±–ª–æ–Ω
router.get('/email-templates/:templateKey', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        const { templateKey } = req.params;
        
        // –ú–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–π —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞ ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const templateIds = {
            'welcome': 7,
            'verification': 8,
            'application-approved': 9,
            'application-rejected': 10,
            'password-reset': 11,
            'newsletter': 12
        };
        
        const templateId = templateIds[templateKey];
        if (!templateId) {
            return res.status(404).json({
                error: 'Email —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }
        
        const result = await db.query(`
            SELECT 
                et.id,
                et.template_name, 
                et.template_subject, 
                et.template_html, 
                et.is_active,
                et.created_at, 
                et.updated_at
            FROM email_templates et
            WHERE et.id = $1 AND et.is_active = true
        `, [templateId]);

        if (result.rows.length === 0) {
            return res.status(404).json({
                error: 'Email —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        const template = result.rows[0];
        res.json({
            success: true,
            template: {
                key: templateKey,
                name: template.template_name,
                subject: template.template_subject,
                html: template.template_html,
                createdAt: template.created_at,
                updatedAt: template.updated_at
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ email —à–∞–±–ª–æ–Ω–∞:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ email —à–∞–±–ª–æ–Ω–∞'
        });
    }
});

// GET /api/admin/users-for-email - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ email
router.get('/users-for-email', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        const result = await db.query(`
            SELECT 
                id,
                nickname,
                email,
                role,
                trust_level,
                is_banned,
                registered_at
            FROM users 
            WHERE is_banned = false 
            ORDER BY 
                CASE 
                    WHEN role = 'admin' THEN 1
                    WHEN role = 'moderator' THEN 2
                    WHEN role = 'user' THEN 3
                    ELSE 4
                END,
                nickname ASC
            LIMIT 100
        `);

        const users = result.rows.map(user => ({
            id: user.id,
            nickname: user.nickname,
            email: user.email,
            role: user.role,
            trustLevel: user.trust_level,
            displayName: `${user.nickname} (${user.email}) - ${user.role}`,
            joinDate: user.registered_at
        }));

        res.json({
            success: true,
            users: users
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        });
    }
});

// POST /api/admin/test-email-settings - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email –Ω–∞—Å—Ç—Ä–æ–µ–∫
router.post('/test-email-settings', [
    authenticateToken,
    requireRole(['admin']),
    body('host').notEmpty(),
    body('port').isInt({ min: 1, max: 65535 }),
    body('user').notEmpty(),
    body('from').isEmail(),
    body('tls').isBoolean()
], async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({
                error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                details: errors.array()
            });
        }

        const { host, port, user, from, tls } = req.body;
        const nodemailer = require('nodemailer');

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        const testTransporter = nodemailer.createTransporter({
            host: host,
            port: port,
            secure: port === 465,
            auth: {
                user: user,
                pass: 'test' // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            },
            tls: {
                rejectUnauthorized: !tls
            }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await testTransporter.verify();

        res.json({
            success: true,
            message: 'Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email:', error);
        res.status(400).json({
            error: error.message || '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SMTP —Å–µ—Ä–≤–µ—Ä–æ–º'
        });
    }
});

// GET /api/admin/test-database - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
router.get('/test-database', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const result = await db.query('SELECT NOW() as server_time, version() as db_version');
        const dbInfo = result.rows[0];

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü
        const tablesResult = await db.query(`
            SELECT COUNT(*) as table_count 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
        `);
        const tableCount = tablesResult.rows[0].table_count;

        res.json({
            success: true,
            message: `–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`,
            details: {
                serverTime: dbInfo.server_time,
                version: dbInfo.db_version,
                tables: tableCount
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: ' + error.message
        });
    }
});

// POST /api/admin/clear-cache - –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
router.post('/clear-cache', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        // –û—á–∏—â–∞–µ–º require cache –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        Object.keys(require.cache).forEach(key => {
            if (key.includes('/config/') || key.includes('/settings')) {
                delete require.cache[key];
            }
        });

        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –¥—Ä—É–≥–∏—Ö –≤–∏–¥–æ–≤ –∫–µ—à–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        
        res.json({
            success: true,
            message: '–ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞'
        });
    }
});

// PUT /api/admin/settings - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
router.put('/settings', [
    authenticateToken,
    requireRole(['admin']),
    body('serverName').optional().isLength({ max: 100 }),
    body('serverDescription').optional().isLength({ max: 500 }),
    body('serverIp').optional().isLength({ max: 100 }),
    body('serverPort').optional().isInt({ min: 1, max: 65535 }),
    body('minMotivationLength').optional().isInt({ min: 10, max: 1000 }),
    body('minPlansLength').optional().isInt({ min: 10, max: 1000 }),
    body('maxApplicationsPerDay').optional().isInt({ min: 1, max: 50 }),
    body('maxLoginAttempts').optional().isInt({ min: 1, max: 20 }),
    body('rateLimitRequests').optional().isInt({ min: 10, max: 10000 })
], async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({
                error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                details: errors.array()
            });
        }

        const settings = req.body;
        const fs = require('fs').promises;
        const path = require('path');

        // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const settingsPath = path.join(__dirname, '../config/settings.js');
        let currentConfig;
        
        try {
            // –û—á–∏—â–∞–µ–º –∫–µ—à –∏ —á–∏—Ç–∞–µ–º –∑–∞–Ω–æ–≤–æ
            delete require.cache[require.resolve('../config/settings')];
            currentConfig = require('../config/settings');
        } catch (error) {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            currentConfig = {
                server: {},
                applications: {},
                trustLevel: {},
                security: {},
                email: {}
            };
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (settings.serverName !== undefined) currentConfig.server.name = settings.serverName;
        if (settings.serverDescription !== undefined) currentConfig.server.description = settings.serverDescription;
        if (settings.serverIp !== undefined) currentConfig.server.ip = settings.serverIp;
        if (settings.serverPort !== undefined) currentConfig.server.port = settings.serverPort.toString();
        if (settings.discordInvite !== undefined) currentConfig.server.discord = settings.discordInvite;
        if (settings.telegramInvite !== undefined) currentConfig.server.telegram = settings.telegramInvite;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—è–≤–æ–∫
        if (settings.applicationsEnabled !== undefined) currentConfig.applications.enabled = settings.applicationsEnabled;
        if (settings.minMotivationLength !== undefined) currentConfig.applications.minMotivationLength = settings.minMotivationLength;
        if (settings.minPlansLength !== undefined) currentConfig.applications.minPlansLength = settings.minPlansLength;
        if (settings.maxApplicationsPerDay !== undefined) currentConfig.applications.maxApplicationsPerDay = settings.maxApplicationsPerDay;
        if (settings.autoApproveTrustLevel !== undefined) currentConfig.applications.autoApproveTrustLevel = settings.autoApproveTrustLevel;

        // Trust Level –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (settings.trustPointsEmail !== undefined) currentConfig.trustLevel.pointsForEmail = settings.trustPointsEmail;
        if (settings.trustPointsDiscord !== undefined) currentConfig.trustLevel.pointsForDiscord = settings.trustPointsDiscord;
        if (settings.trustPointsHour !== undefined) currentConfig.trustLevel.pointsPerHour = settings.trustPointsHour;
        if (settings.trustLevel1Required !== undefined) currentConfig.trustLevel.level1Required = settings.trustLevel1Required;
        if (settings.trustLevel2Required !== undefined) currentConfig.trustLevel.level2Required = settings.trustLevel2Required;
        if (settings.trustLevel3Required !== undefined) currentConfig.trustLevel.level3Required = settings.trustLevel3Required;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if (settings.maxLoginAttempts !== undefined) currentConfig.security.maxLoginAttempts = settings.maxLoginAttempts;
        if (settings.loginLockoutDuration !== undefined) currentConfig.security.lockoutDuration = settings.loginLockoutDuration;
        if (settings.jwtExpiresDays !== undefined) currentConfig.security.jwtExpiresDays = settings.jwtExpiresDays;
        if (settings.requireEmailVerification !== undefined) currentConfig.security.requireEmailVerification = settings.requireEmailVerification;
        if (settings.twoFactorEnabled !== undefined) currentConfig.security.twoFactorEnabled = settings.twoFactorEnabled;
        if (settings.rateLimitRequests !== undefined) currentConfig.security.rateLimitRequests = settings.rateLimitRequests;

        // Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (settings.smtpHost !== undefined) currentConfig.email.host = settings.smtpHost;
        if (settings.smtpPort !== undefined) currentConfig.email.port = settings.smtpPort;
        if (settings.smtpFrom !== undefined) currentConfig.email.from = settings.smtpFrom;
        if (settings.smtpUser !== undefined) currentConfig.email.user = settings.smtpUser;
        if (settings.smtpPassword !== undefined) currentConfig.email.password = settings.smtpPassword;
        if (settings.smtpTls !== undefined) currentConfig.email.tls = settings.smtpTls;

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const configContent = `// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é

module.exports = ${JSON.stringify(currentConfig, null, 4)};
`;

        await fs.writeFile(settingsPath, configContent, 'utf-8');

        // –û—á–∏—â–∞–µ–º –∫–µ—à –Ω–∞—Å—Ç—Ä–æ–µ–∫
        delete require.cache[require.resolve('../config/settings')];

        // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await db.query(`
            INSERT INTO admin_logs (admin_id, action, details)
            VALUES ($1, $2, $3)
        `, [
            req.user.id,
            'settings_updated',
            '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'
        ]);

        res.json({
            success: true,
            message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// POST /api/admin/test-email - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email –Ω–∞—Å—Ç—Ä–æ–µ–∫
router.post('/test-email', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        const { recipient, template, settings } = req.body;
        
        if (!recipient) {
            return res.status(400).json({
                error: '–£–∫–∞–∂–∏—Ç–µ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è'
            });
        }
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(recipient)) {
            return res.status(400).json({
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞'
            });
        }
        
        const nodemailer = require('nodemailer');
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        const transporter = nodemailer.createTransport({
            host: settings.host || 'smtp.yandex.ru',
            port: settings.port || 465,
            secure: settings.secure !== false, // true –¥–ª—è 465, false –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ç–æ–≤
            auth: {
                user: settings.user,
                pass: settings.password
            },
            timeout: 30000,
            connectionTimeout: 30000,
            socketTimeout: 30000
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await transporter.verify();
        
        // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞
        let subject = '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å —Å–µ—Ä–≤–µ—Ä–∞';
        let html = '<h1>–¢–µ—Å—Ç email –Ω–∞—Å—Ç—Ä–æ–µ–∫</h1><p>–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ, –∑–Ω–∞—á–∏—Ç SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</p>';
        
        if (template && template !== 'test') {
            try {
                const templateResult = await db.query(
                    'SELECT template_subject, template_html FROM email_templates WHERE template_name = $1',
                    [template]
                );
                
                if (templateResult.rows.length > 0) {
                    subject = templateResult.rows[0].template_subject || subject;
                    html = templateResult.rows[0].template_html || html;
                    
                    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞
                    const settingsResult = await db.query(`
                        SELECT setting_key, setting_value 
                        FROM server_settings 
                        WHERE setting_key IN ('server-name', 'server-ip', 'server-port', 'discord-invite', 'telegram-invite')
                    `);
                    
                    const serverSettings = {};
                    settingsResult.rows.forEach(row => {
                        serverSettings[row.setting_key] = row.setting_value;
                    });
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–µ—Ä–≤–µ—Ä–∞
                    const templateData = {
                        serverName: serverSettings.serverName || 'ChiwawaMine',
                        nickname: req.user?.nickname || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                        serverIp: serverSettings.serverIp || 'chiwawasite.com',
                        serverPort: serverSettings.serverPort || '25565',
                        discordInvite: serverSettings.discordInvite || 'https://discord.gg/chiwawa',
                        telegramInvite: serverSettings.telegramInvite || 'https://t.me/chiwawa',
                        verificationLink: `${req.protocol}://${req.get('host')}/verify/test-token`,
                        resetLink: `${req.protocol}://${req.get('host')}/reset-password/test-token`,
                        currentDate: new Date().toLocaleDateString('ru-RU'),
                        userEmail: req.user?.email || 'admin@chiwawasite.com'
                    };
                    
                    Object.keys(templateData).forEach(key => {
                        const regex = new RegExp(`{{${key}}}`, 'g');
                        subject = subject.replace(regex, templateData[key]);
                        html = html.replace(regex, templateData[key]);
                    });
                }
            } catch (templateError) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–∏—Å—å–º–æ:', templateError.message);
            }
        }
        
        const startTime = Date.now();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        const info = await transporter.sendMail({
            from: `"${settings.senderName || 'ChiwawaMine'}" <${settings.from || settings.user}>`,
            to: recipient,
            subject: subject,
            html: html
        });
        
        const deliveryTime = Date.now() - startTime;
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ—Å—Ç
        await db.query(`
            INSERT INTO admin_logs (admin_id, action, details)
            VALUES ($1, $2, $3)
        `, [
            req.user.id,
            'email_test',
            `–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${recipient}, –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryTime}–º—Å`
        ]);
        
        res.json({
            success: true,
            message: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
            messageId: info.messageId,
            deliveryTime: `${deliveryTime}–º—Å`,
            sentAt: new Date().toLocaleString('ru-RU')
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email:', error);
        
        let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞';
        
        if (error.code === 'ECONNREFUSED') {
            errorMessage = '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç.';
        } else if (error.code === 'EAUTH' || error.responseCode === 535) {
            errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.';
        } else if (error.code === 'ETIMEDOUT') {
            errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏.';
        } else if (error.message) {
            errorMessage = error.message;
        }
        
        res.status(500).json({
            error: errorMessage,
            details: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

// GET /api/admin/system-info - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
router.get('/system-info', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        const memoryUsage = process.memoryUsage();
        const uptimeSeconds = process.uptime();
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        const hours = Math.floor(uptimeSeconds / 3600);
        const minutes = Math.floor((uptimeSeconds % 3600) / 60);
        const uptimeFormatted = `${hours}—á ${minutes}–º`;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ –ú–ë
        const formatMemory = (bytes) => {
            return `${Math.round(bytes / 1024 / 1024)}MB`;
        };

        const systemInfo = {
            nodeVersion: process.version,
            uptime: uptimeFormatted,
            memory: {
                rss: formatMemory(memoryUsage.rss),
                heapUsed: formatMemory(memoryUsage.heapUsed),
                heapTotal: formatMemory(memoryUsage.heapTotal)
            },
            environment: process.env.NODE_ENV || 'development',
            port: process.env.PORT || 3000
        };

        res.json(systemInfo);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' });
    }
});

// ===========================================
// API –¢–û–ö–ï–ù–´ –î–õ–Ø –ü–õ–ê–ì–ò–ù–û–í –ò –í–ù–ï–®–ù–ò–• –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
// ===========================================

// GET /api/admin/api-tokens - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ API —Ç–æ–∫–µ–Ω–æ–≤
router.get('/api-tokens', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        const result = await db.query(`
            SELECT 
                at.id,
                at.token_name,
                at.token_prefix,
                at.permissions,
                at.is_active,
                at.last_used_at,
                at.expires_at,
                at.created_at,
                at.description,
                u.nickname as created_by_name
            FROM api_tokens at
            LEFT JOIN users u ON at.created_by = u.id
            ORDER BY at.created_at DESC
        `);

        res.json({
            tokens: result.rows.map(token => ({
                ...token,
                permissions: token.permissions || []
            }))
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API —Ç–æ–∫–µ–Ω–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// POST /api/admin/api-tokens - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API —Ç–æ–∫–µ–Ω
router.post('/api-tokens', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        const { name, description, permissions = [], expiresInDays = null, userId = null } = req.body;

        if (!name || name.trim().length === 0) {
            return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–∫–µ–Ω
        const crypto = require('crypto');
        const tokenLength = 64;
        const rawToken = crypto.randomBytes(tokenLength).toString('hex');
        const tokenHash = crypto.createHash('sha256').update(rawToken).digest('hex');
        const tokenPrefix = rawToken.substring(0, 8);

        // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
        let expiresAt = null;
        if (expiresInDays && expiresInDays > 0) {
            expiresAt = new Date();
            expiresAt.setDate(expiresAt.getDate() + expiresInDays);
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–æ–∑–¥–∞—Ç–µ–ª—å)
        const targetUserId = userId || req.user.id;

        // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const result = await db.query(`
            INSERT INTO api_tokens (
                token_name, token_hash, token_prefix, user_id, 
                permissions, expires_at, created_by, description
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
            RETURNING id, token_name, token_prefix, created_at
        `, [
            name.trim(),
            tokenHash,
            tokenPrefix,
            targetUserId,
            JSON.stringify(permissions),
            expiresAt,
            req.user.id,
            description?.trim() || null
        ]);

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        await db.query(
            'INSERT INTO admin_logs (admin_id, action, details) VALUES ($1, $2, $3)',
            [req.user.id, 'api_token_created', `–°–æ–∑–¥–∞–Ω API —Ç–æ–∫–µ–Ω: ${name}`]
        );

        res.json({
            success: true,
            message: 'API —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
            token: {
                id: result.rows[0].id,
                name: result.rows[0].token_name,
                prefix: result.rows[0].token_prefix,
                created_at: result.rows[0].created_at,
                // –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏!
                full_token: rawToken
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// PUT /api/admin/api-tokens/:id - –û–±–Ω–æ–≤–∏—Ç—å API —Ç–æ–∫–µ–Ω
router.put('/api-tokens/:id', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        const tokenId = parseInt(req.params.id);
        const { name, description, permissions, is_active } = req.body;

        const result = await db.query(`
            UPDATE api_tokens 
            SET token_name = $1, description = $2, permissions = $3, is_active = $4
            WHERE id = $5
            RETURNING token_name
        `, [
            name?.trim(),
            description?.trim() || null,
            JSON.stringify(permissions || []),
            is_active !== undefined ? is_active : true,
            tokenId
        ]);

        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await db.query(
            'INSERT INTO admin_logs (admin_id, action, details) VALUES ($1, $2, $3)',
            [req.user.id, 'api_token_updated', `–û–±–Ω–æ–≤–ª–µ–Ω API —Ç–æ–∫–µ–Ω: ${result.rows[0].token_name}`]
        );

        res.json({ success: true, message: 'API —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω' });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// DELETE /api/admin/api-tokens/:id - –£–¥–∞–ª–∏—Ç—å API —Ç–æ–∫–µ–Ω
router.delete('/api-tokens/:id', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        const tokenId = parseInt(req.params.id);

        const result = await db.query(`
            DELETE FROM api_tokens 
            WHERE id = $1
            RETURNING token_name
        `, [tokenId]);

        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        await db.query(
            'INSERT INTO admin_logs (admin_id, action, details) VALUES ($1, $2, $3)',
            [req.user.id, 'api_token_deleted', `–£–¥–∞–ª–µ–Ω API —Ç–æ–∫–µ–Ω: ${result.rows[0].token_name}`]
        );

        res.json({ success: true, message: 'API —Ç–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω' });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è API —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// POST /api/admin/api-tokens/plugin - –°–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞ (–±–µ—Å—Å—Ä–æ—á–Ω—ã–π)
router.post('/api-tokens/plugin', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        const { name = 'Minecraft Plugin Token' } = req.body;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞
        const crypto = require('crypto');
        const rawToken = crypto.randomBytes(64).toString('hex');
        const tokenHash = crypto.createHash('sha256').update(rawToken).digest('hex');
        const tokenPrefix = rawToken.substring(0, 8);

        // –ü—Ä–∞–≤–∞ –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞
        const pluginPermissions = [
            'server:status',
            'players:read',
            'players:update',
            'sessions:manage',
            'stats:update'
        ];

        // –°–æ–∑–¥–∞–µ–º –±–µ—Å—Å—Ä–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω
        const result = await db.query(`
            INSERT INTO api_tokens (
                token_name, token_hash, token_prefix, user_id, 
                permissions, expires_at, created_by, description
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
            RETURNING id, token_name, token_prefix, created_at
        `, [
            name,
            tokenHash,
            tokenPrefix,
            req.user.id,
            JSON.stringify(pluginPermissions),
            null, // –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å—Ç–µ–∫–∞–µ—Ç
            req.user.id,
            '–ë–µ—Å—Å—Ä–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è Minecraft –ø–ª–∞–≥–∏–Ω–∞'
        ]);

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
        await db.query(
            'INSERT INTO admin_logs (admin_id, action, details) VALUES ($1, $2, $3)',
            [req.user.id, 'plugin_token_created', `–°–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞: ${name}`]
        );

        res.json({
            success: true,
            message: '–¢–æ–∫–µ–Ω –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
            token: {
                id: result.rows[0].id,
                name: result.rows[0].token_name,
                prefix: result.rows[0].token_prefix,
                created_at: result.rows[0].created_at,
                full_token: rawToken,
                permissions: pluginPermissions
            },
            instructions: {
                config_field: 'admin_token',
                expires: 'never',
                usage: '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –≤ config.yml –ø–ª–∞–≥–∏–Ω–∞'
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

module.exports = router;
