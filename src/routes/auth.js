// –ú–∞—Ä—à—Ä—É—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
// –°–æ–∑–¥–∞—Ç–µ–ª—å: ebluffy

const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { body, validationResult } = require('express-validator');
const db = require('../../database/connection');
const { v4: uuidv4 } = require('uuid');
const fetch = require('node-fetch');

const router = express.Router();

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
const authenticateToken = async (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
    }

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
        const sessionResult = await db.query(
            'SELECT s.*, u.* FROM user_sessions s JOIN users u ON s.user_id = u.id WHERE s.token_hash = $1 AND s.expires_at > NOW() AND s.is_active = true',
            [Buffer.from(token).toString('base64')]
        );

        if (sessionResult.rows.length === 0) {
            return res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è' });
        }

        req.user = sessionResult.rows[0];
        
        // –†–æ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ users, –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
        if (!req.user.role) {
            req.user.role = 'user'; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        next();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
        return res.status(403).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –ø–ª–∞–≥–∏–Ω–æ–≤)
const authenticateApiToken = async (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
    }

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        
        // –î–ª—è API —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        const userResult = await db.query(
            'SELECT * FROM users WHERE id = $1',
            [decoded.userId]
        );

        if (userResult.rows.length === 0) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        req.user = userResult.rows[0];
        
        // –†–æ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ users
        if (!req.user.role) {
            req.user.role = 'user'; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        next();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API —Ç–æ–∫–µ–Ω–∞:', error);
        return res.status(403).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
const requireRole = (roles) => {
    return (req, res, next) => {
        if (!req.user) {
            return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
        }

        const userRoles = Array.isArray(roles) ? roles : [roles];
        if (!userRoles.includes(req.user.role)) {
            return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
        }

        next();
    };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞
const logLoginAttempt = async (email, ip, userAgent, success) => {
    try {
        await db.query(
            'INSERT INTO login_logs (user_id, ip_address, user_agent, success) VALUES ((SELECT id FROM users WHERE email = $1), $2, $3, $4)',
            [email, ip, userAgent, success]
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞:', error);
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞
const checkLoginAttempts = async (ip, email) => {
    const result = await db.query(
        `SELECT COUNT(*) as attempts FROM login_logs 
         WHERE (ip_address = $1 OR user_id = (SELECT id FROM users WHERE email = $2)) 
         AND login_time > NOW() - INTERVAL '1 hour' 
         AND success = false`,
        [ip, email]
    );

    return parseInt(result.rows[0].attempts);
};

// POST /api/auth/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/register', [
    body('minecraft_nick')
        .isLength({ min: 3, max: 32 })
        .withMessage('Minecraft –Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤')
        .matches(/^[a-zA-Z0-9_]+$/)
        .withMessage('Minecraft –Ω–∏–∫ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è'),
    body('email').isEmail().normalizeEmail().withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
    body('password')
        .isLength({ min: 8 })
        .withMessage('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤'),
    body('first_name').optional().isLength({ max: 50 }).withMessage('–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤')
], async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({
            error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
            details: errors.array()
        });
    }

    try {
        const { minecraft_nick, email, password, first_name } = req.body;
        const clientIp = req.ip || req.connection.remoteAddress;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ –Ω–∏–∫–æ–º
        const existingUser = await db.query(
            'SELECT id, email, nickname FROM users WHERE email = $1 OR nickname = $2',
            [email, minecraft_nick]
        );

        if (existingUser.rows.length > 0) {
            const existing = existingUser.rows[0];
            if (existing.email === email) {
                return res.status(400).json({
                    error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                });
            }
            if (existing.nickname === minecraft_nick) {
                return res.status(400).json({
                    error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Minecraft –Ω–∏–∫–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                });
            }
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const saltRounds = parseInt(process.env.BCRYPT_ROUNDS) || 12;
        const passwordHash = await bcrypt.hash(password, saltRounds);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const result = await db.query(
            `INSERT INTO users (nickname, email, password_hash, first_name, registered_at) 
             VALUES ($1, $2, $3, $4, NOW()) 
             RETURNING id, nickname, email, first_name, registered_at`,
            [minecraft_nick, email, passwordHash, first_name || null]
        );

        const newUser = result.rows[0];

        // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
        await db.query(`
            INSERT INTO player_stats (
                user_id, time_played_minutes, is_time_limited,
                current_level, u.is_email_verified, reputation, total_logins
            ) VALUES ($1, 0, 600, true, 0, false, false, false, 0, 0, 0)
        `, [newUser.id]);

        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await logLoginAttempt(newUser.id, clientIp, req.get('User-Agent'), true);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        try {
            const verificationToken = uuidv4();
            const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞

            await db.query(
                'INSERT INTO email_verification_tokens (user_id, token, expires_at) VALUES ($1, $2, $3)',
                [newUser.id, verificationToken, expiresAt]
            );

            console.log(`üìß –¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –¥–ª—è ${email}: ${verificationToken}`);
            console.log(`üåê –°—Å—ã–ª–∫–∞: ${req.protocol}://${req.get('host')}/verify-email?token=${verificationToken}`);
        } catch (emailError) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email:', emailError);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
        }

        console.log(`‚úÖ –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${minecraft_nick} (${email})`);

        res.status(201).json({
            message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞.',
            user: {
                id: newUser.id,
                nickname: newUser.nickname,
                email: newUser.email,
                first_name: newUser.first_name,
                registered_at: newUser.registered_at
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        
        if (error.code === '23505') { // –ù–∞—Ä—É—à–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            return res.status(400).json({
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ –Ω–∏–∫–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            });
        }

        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
        });
    }
});

// POST /api/auth/login - –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
router.post('/login', [
    body('email').isEmail().normalizeEmail().withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
    body('password').isLength({ min: 6 }).withMessage('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
], async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({
                error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                details: errors.array()
            });
        }

        const { email, password, remember = false } = req.body;
        const ip = req.ip || req.connection.remoteAddress;
        const userAgent = req.get('User-Agent') || '';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        const failedAttempts = await checkLoginAttempts(ip, email);
        if (failedAttempts >= 5) {
            await logLoginAttempt(email, ip, userAgent, false);
            return res.status(429).json({
                error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —á–∞—Å.'
            });
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResult = await db.query(
            'SELECT * FROM users WHERE email = $1 AND is_active = true',
            [email]
        );

        if (userResult.rows.length === 0) {
            await logLoginAttempt(email, ip, userAgent, false);
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        const user = userResult.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const isPasswordValid = await bcrypt.compare(password, user.password_hash);
        if (!isPasswordValid) {
            await logLoginAttempt(email, ip, userAgent, false);
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        // –°–æ–∑–¥–∞—ë–º JWT —Ç–æ–∫–µ–Ω
        const tokenPayload = {
            userId: user.id,
            email: user.email,
            role: user.role
        };

        const expiresIn = remember ? '30d' : '24h';
        const token = jwt.sign(tokenPayload, process.env.JWT_SECRET, { expiresIn });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const sessionId = uuidv4();
        const expiresAt = new Date();
        expiresAt.setTime(expiresAt.getTime() + (remember ? 30 * 24 * 60 * 60 * 1000 : 24 * 60 * 60 * 1000));

        await db.query(
            'INSERT INTO user_sessions (id, user_id, token_hash, expires_at, ip_address, user_agent) VALUES ($1, $2, $3, $4, $5, $6)',
            [sessionId, user.id, Buffer.from(token).toString('base64'), expiresAt, ip, userAgent]
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        await db.query(
            'UPDATE users SET last_login = NOW() WHERE id = $1',
            [user.id]
        );

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞
        await logLoginAttempt(email, ip, userAgent, true);

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await db.query(
            'INSERT INTO user_activity (user_id, activity_type, description, ip_address) VALUES ($1, $2, $3, $4)',
            [user.id, 'login', '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É', ip]
        );

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
        const { password_hash, ...userWithoutPassword } = user;

        res.json({
            success: true,
            message: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
            token,
            user: userWithoutPassword
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// POST /api/auth/logout - –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
router.post('/logout', authenticateToken, async (req, res) => {
    try {
        const authHeader = req.headers['authorization'];
        const token = authHeader && authHeader.split(' ')[1];
        
        if (token) {
            // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
            await db.query(
                'UPDATE user_sessions SET is_active = false WHERE token_hash = $1',
                [Buffer.from(token).toString('base64')]
            );

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await db.query(
                'INSERT INTO user_activity (user_id, activity_type, description, ip_address) VALUES ($1, $2, $3, $4)',
                [req.user.id, 'logout', '–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', req.ip]
            );
        }

        res.json({ success: true, message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// GET /api/auth/verify - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
router.get('/verify', authenticateApiToken, async (req, res) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResult = await db.query(
            'SELECT * FROM users WHERE id = $1 AND is_active = true',
            [req.user.id]
        );

        if (userResult.rows.length === 0) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const { password_hash, ...userWithoutPassword } = userResult.rows[0];

        res.json({
            success: true,
            user: userWithoutPassword
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// POST /api/auth/refresh - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
router.post('/refresh', authenticateToken, async (req, res) => {
    try {
        const tokenPayload = {
            userId: req.user.id,
            email: req.user.email,
            role: req.user.role
        };

        const newToken = jwt.sign(tokenPayload, process.env.JWT_SECRET, { expiresIn: '24h' });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        const authHeader = req.headers['authorization'];
        const oldToken = authHeader && authHeader.split(' ')[1];
        
        await db.query(
            'UPDATE user_sessions SET token_hash = $1, expires_at = NOW() + INTERVAL \'24 hours\' WHERE token_hash = $2',
            [Buffer.from(newToken).toString('base64'), Buffer.from(oldToken).toString('base64')]
        );

        res.json({
            success: true,
            token: newToken
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// POST /api/auth/send-verification - –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º email
router.post('/send-verification', authenticateToken, async (req, res) => {
    try {
        const user = req.user;
        
        if (user.is_email_verified) {
            return res.status(400).json({ error: 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const verificationToken = uuidv4();
        const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.query(`
            DELETE FROM email_verification_tokens WHERE user_id = $1
        `, [user.id]);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.query(`
            INSERT INTO email_verification_tokens (user_id, token, expires_at, created_at, used)
            VALUES ($1, $2, $3, NOW(), false)
        `, [user.id, verificationToken, expiresAt]);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ emailService
        const emailService = require('../utils/emailService');
        const verificationUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/verify-email?token=${verificationToken}`;
        try {
            await emailService.sendVerificationEmail(user.email, user.nickname || user.minecraft_nick, verificationUrl);
            res.json({
                message: '–ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                verification_url: verificationUrl
            });
        } catch (mailError) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ SMTP:', mailError);
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ (SMTP)' });
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞' });
    }
});

// GET /api/auth/verify-email - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –ø–æ —Ç–æ–∫–µ–Ω—É
router.get('/verify-email', async (req, res) => {
    try {
        const { token } = req.query;

        if (!token) {
            return res.status(400).json({ error: '–¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        const tokenResult = await db.query(`
            SELECT ev.*, u.email 
            FROM email_verification_tokens ev
            JOIN users u ON ev.user_id = u.id
            WHERE ev.token = $1 AND ev.expires_at > NOW()
        `, [token]);

        if (tokenResult.rows.length === 0) {
            return res.status(400).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω' });
        }

        const tokenData = tokenResult.rows[0];

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
        await db.query(`
            UPDATE player_stats 
            SET is_email_verified = true
            WHERE user_id = $1
        `, [tokenData.user_id]);

        // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        await db.query(`
            DELETE FROM email_verification_tokens WHERE token = $1
        `, [token]);

        res.json({ message: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email' });
    }
});

// GET /api/auth/discord - –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –Ω–∞ Discord OAuth
router.get('/discord', (req, res) => {
    const discordClientId = process.env.DISCORD_CLIENT_ID;
    const redirectUri = encodeURIComponent(`${process.env.FRONTEND_URL || 'http://localhost:3000'}/api/auth/discord/callback`);
    const scope = encodeURIComponent('identify email');
    
    if (!discordClientId) {
        return res.status(500).json({ error: 'Discord OAuth –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
    }
    
    const discordAuthUrl = `https://discord.com/api/oauth2/authorize?client_id=${discordClientId}&redirect_uri=${redirectUri}&response_type=code&scope=${scope}`;
    
    res.redirect(discordAuthUrl);
});

// GET /api/auth/discord/callback - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Discord
router.get('/discord/callback', async (req, res) => {
    try {
        const { code } = req.query;
        
        if (!code) {
            return res.redirect('/?error=discord_auth_failed');
        }

        // –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω
        const tokenResponse = await fetch('https://discord.com/api/oauth2/token', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({
                client_id: process.env.DISCORD_CLIENT_ID,
                client_secret: process.env.DISCORD_CLIENT_SECRET,
                grant_type: 'authorization_code',
                code: code,
                redirect_uri: `${process.env.FRONTEND_URL || 'http://localhost:3000'}/api/auth/discord/callback`
            })
        });

        const tokenData = await tokenResponse.json();
        
        if (!tokenData.access_token) {
            return res.redirect('/?error=discord_token_failed');
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Discord
        const userResponse = await fetch('https://discord.com/api/users/@me', {
            headers: {
                'Authorization': `Bearer ${tokenData.access_token}`
            }
        });

        const discordUser = await userResponse.json();
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π Discord username (–±–µ–∑ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ Discord –µ–≥–æ —É–±—Ä–∞–ª)
        const discordUsername = discordUser.username;
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        req.session.pendingDiscordLink = {
            id: discordUser.id,
            username: discordUsername,
            email: discordUser.email,
            avatar: discordUser.avatar,
            access_token: tokenData.access_token,
            refresh_token: tokenData.refresh_token,
            expires_at: new Date(Date.now() + (tokenData.expires_in * 1000))
        };
        
        res.redirect(`/profile?discord_ready=true&username=${encodeURIComponent(discordUsername)}`);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ Discord OAuth:', error);
        res.redirect('/?error=discord_oauth_error');
    }
});

// POST /api/auth/link-discord - –ü—Ä–∏–≤—è–∑–∫–∞ Discord –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é
router.post('/link-discord', authenticateToken, async (req, res) => {
    try {
        if (!req.session.pendingDiscordLink) {
            return res.status(400).json({ 
                error: '–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–π –ø—Ä–∏–≤—è–∑–∫–∏ Discord –∞–∫–∫–∞—É–Ω—Ç–∞. –ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Discord –∑–∞–Ω–æ–≤–æ.' 
            });
        }

        const discordData = req.session.pendingDiscordLink;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —ç—Ç–æ—Ç Discord –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const existingLink = await db.query(`
            SELECT user_id FROM discord_oauth WHERE discord_id = $1
        `, [discordData.id]);

        if (existingLink.rows.length > 0 && existingLink.rows[0].user_id !== req.user.id) {
            return res.status(400).json({
                error: '–≠—Ç–æ—Ç Discord –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.query(`
            UPDATE users 
            SET discord_username = $1 
            WHERE id = $2
        `, [discordData.username, req.user.id]);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º OAuth –¥–∞–Ω–Ω—ã–µ
        await db.query(`
            INSERT INTO discord_oauth (
                user_id, discord_id, discord_username, discord_avatar,
                access_token, refresh_token, expires_at
            ) VALUES ($1, $2, $3, $4, $5, $6, $7)
            ON CONFLICT (discord_id) 
            DO UPDATE SET 
                user_id = $1,
                discord_username = $3,
                discord_avatar = $4,
                access_token = $5,
                refresh_token = $6,
                expires_at = $7,
                updated_at = NOW()
        `, [
            req.user.id, 
            discordData.id, 
            discordData.username,
            discordData.avatar,
            discordData.access_token,
            discordData.refresh_token,
            discordData.expires_at
        ]);

        // –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await db.query(`
            INSERT INTO user_activity (user_id, activity_type, description)
            VALUES ($1, 'discord_linked', $2)
        `, [req.user.id, `–ü—Ä–∏–≤—è–∑–∞–Ω Discord –∞–∫–∫–∞—É–Ω—Ç: ${discordData.username}`]);

        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        delete req.session.pendingDiscordLink;

        res.json({
            success: true,
            message: 'Discord –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω',
            discord_username: discordData.username
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Discord:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Discord –∞–∫–∫–∞—É–Ω—Ç–∞' });
    }
});

// POST /api/auth/unlink-discord - –û—Ç–≤—è–∑–∫–∞ Discord –∞–∫–∫–∞—É–Ω—Ç–∞
router.post('/unlink-discord', authenticateToken, async (req, res) => {
    try {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É Discord
        await db.query(`
            UPDATE users 
            SET discord_username = NULL 
            WHERE id = $1
        `, [req.user.id]);

        // –£–¥–∞–ª—è–µ–º OAuth –¥–∞–Ω–Ω—ã–µ
        await db.query(`
            DELETE FROM discord_oauth 
            WHERE user_id = $1
        `, [req.user.id]);

        // –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await db.query(`
            INSERT INTO user_activity (user_id, activity_type, description)
            VALUES ($1, 'discord_unlinked', '–û—Ç–≤—è–∑–∞–Ω Discord –∞–∫–∫–∞—É–Ω—Ç')
        `, [req.user.id]);

        res.json({
            success: true,
            message: 'Discord –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ Discord:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ Discord –∞–∫–∫–∞—É–Ω—Ç–∞' });
    }
});

// POST /api/auth/forgot-password - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
router.post('/forgot-password', [
    body('email').isEmail().normalizeEmail()
], async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å'
            });
        }

        const { email } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const userResult = await db.query(
            'SELECT id, nickname FROM users WHERE email = $1',
            [email]
        );

        if (userResult.rows.length === 0) {
            // –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ç –∂–µ –æ—Ç–≤–µ—Ç
            return res.json({
                message: '–ï—Å–ª–∏ email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ, —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
            });
        }

        const user = userResult.rows[0];
        const resetToken = uuidv4();
        const expiresAt = new Date(Date.now() + 3600000); // 1 —á–∞—Å

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.query(
            'DELETE FROM password_reset_tokens WHERE user_id = $1',
            [user.id]
        );

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        await db.query(
            'INSERT INTO password_reset_tokens (user_id, token, expires_at) VALUES ($1, $2, $3)',
            [user.id, resetToken, expiresAt]
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
        console.log(`üîê –¢–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è ${email}: ${resetToken}`);
        console.log(`üåê –°—Å—ã–ª–∫–∞: ${req.protocol}://${req.get('host')}/reset-password?token=${resetToken}`);

        res.json({
            message: '–ï—Å–ª–∏ email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ, —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// POST /api/auth/reset-password - –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
router.post('/reset-password', [
    body('token').notEmpty(),
    body('password').isLength({ min: 6 })
], async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
            });
        }

        const { token, password } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        const tokenResult = await db.query(
            'SELECT user_id FROM password_reset_tokens WHERE token = $1 AND expires_at > NOW() AND used = false',
            [token]
        );

        if (tokenResult.rows.length === 0) {
            return res.status(400).json({
                error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω'
            });
        }

        const userId = tokenResult.rows[0].user_id;

        // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        const hashedPassword = await bcrypt.hash(password, 12);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.query(
            'UPDATE users SET password_hash = $1 WHERE id = $2',
            [hashedPassword, userId]
        );

        // –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        await db.query(
            'UPDATE password_reset_tokens SET used = true WHERE token = $1',
            [token]
        );

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await db.query(
            'UPDATE user_sessions SET is_active = false WHERE user_id = $1',
            [userId]
        );

        res.json({
            message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// GET /api/auth/verify-reset-token - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
router.get('/verify-reset-token', async (req, res) => {
    try {
        const { token } = req.query;

        if (!token) {
            return res.status(400).json({
                error: '–¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        const tokenResult = await db.query(
            'SELECT user_id FROM password_reset_tokens WHERE token = $1 AND expires_at > NOW() AND used = false',
            [token]
        );

        if (tokenResult.rows.length === 0) {
            return res.status(400).json({
                error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω'
            });
        }

        res.json({
            valid: true
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// GET /api/auth/verify-email-token - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –ø–æ —Ç–æ–∫–µ–Ω—É
router.get('/verify-email-token', async (req, res) => {
    try {
        const { token } = req.query;

        if (!token) {
            return res.status(400).json({
                error: '–¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const tokenResult = await db.query(
            'SELECT user_id FROM email_verification_tokens WHERE token = $1 AND expires_at > NOW() AND used = false',
            [token]
        );

        if (tokenResult.rows.length === 0) {
            return res.status(400).json({
                error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω'
            });
        }

        const userId = tokenResult.rows[0].user_id;

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.query(
            'UPDATE users SET is_email_verified = true WHERE id = $1',
            [userId]
        );

        // –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        await db.query(
            'UPDATE email_verification_tokens SET used = true WHERE token = $1',
            [token]
        );

        res.json({
            message: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç middleware
// POST /api/auth/generate-game-token - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É
router.post('/generate-game-token', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.id;
        const userAgent = req.headers['user-agent'] || '';
        const ipAddress = req.ip || req.connection.remoteAddress;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É
        const applicationResult = await db.query(`
            SELECT status FROM applications 
            WHERE user_id = $1 AND status = 'approved'
            ORDER BY submitted_at DESC 
            LIMIT 1
        `, [userId]);

        if (applicationResult.rows.length === 0) {
            return res.status(403).json({ 
                error: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø.' 
            });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
        const gameToken = uuidv4() + '-' + Date.now().toString(36);
        const tokenHash = require('crypto').createHash('sha256').update(gameToken).digest('hex');

        // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ - 15 –º–∏–Ω—É—Ç
        const expiresAt = new Date(Date.now() + 15 * 60 * 1000);

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.query(`
            UPDATE game_tokens 
            SET is_used = true, used_at = NOW() 
            WHERE user_id = $1 AND is_used = false AND expires_at > NOW()
        `, [userId]);

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        await db.query(`
            INSERT INTO game_tokens (user_id, token_hash, expires_at, ip_address, user_agent)
            VALUES ($1, $2, $3, $4, $5)
        `, [userId, tokenHash, expiresAt, ipAddress, userAgent]);

        res.json({
            success: true,
            token: gameToken,
            expires_at: expiresAt,
            expires_in: 15 * 60, // —Å–µ–∫—É–Ω–¥—ã
            message: '–¢–æ–∫–µ–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É —Å–æ–∑–¥–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login ' + gameToken + ' –≤ –∏–≥—Ä–µ.'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// POST /api/auth/verify-game-token - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –ø–ª–∞–≥–∏–Ω–∞)
router.post('/verify-game-token', authenticateApiToken, async (req, res) => {
    try {
        const { token, nickname } = req.body;

        if (!token || !nickname) {
            return res.status(400).json({ error: '–¢–æ–∫–µ–Ω –∏ –Ω–∏–∫–Ω–µ–π–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        // –•–µ—à–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
        const tokenHash = require('crypto').createHash('sha256').update(token).digest('hex');

        // –ò—â–µ–º —Ç–æ–∫–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        const tokenResult = await db.query(`
            SELECT gt.*, u.nickname, u.id as user_id, u.role, u.trust_level, u.is_banned
            FROM game_tokens gt
            JOIN users u ON gt.user_id = u.id
            WHERE gt.token_hash = $1 AND gt.expires_at > NOW() AND gt.is_used = false
        `, [tokenHash]);

        if (tokenResult.rows.length === 0) {
            return res.status(401).json({ 
                error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω',
                valid: false 
            });
        }

        const tokenData = tokenResult.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∏–∫–Ω–µ–π–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É —Ç–æ–∫–µ–Ω–∞
        if (tokenData.nickname.toLowerCase() !== nickname.toLowerCase()) {
            return res.status(403).json({ 
                error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–∞–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫—É',
                valid: false 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω
        if (tokenData.is_banned) {
            return res.status(403).json({ 
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
                valid: false 
            });
        }

        // –û—Ç–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        await db.query(`
            UPDATE game_tokens 
            SET is_used = true, used_at = NOW() 
            WHERE id = $1
        `, [tokenData.id]);

        res.json({
            valid: true,
            user: {
                id: tokenData.user_id,
                nickname: tokenData.nickname,
                role: tokenData.role,
                trust_level: tokenData.trust_level
            },
            message: '–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// GET /api/auth/game-tokens - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/game-tokens', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.id;

        const tokensResult = await db.query(`
            SELECT id, expires_at, is_used, used_at, created_at, ip_address
            FROM game_tokens 
            WHERE user_id = $1 
            ORDER BY created_at DESC 
            LIMIT 10
        `, [userId]);

        res.json({
            tokens: tokensResult.rows.map(token => ({
                id: token.id,
                expires_at: token.expires_at,
                is_used: token.is_used,
                used_at: token.used_at,
                created_at: token.created_at,
                ip_address: token.ip_address,
                status: token.is_used ? 'used' : (new Date(token.expires_at) < new Date() ? 'expired' : 'active')
            }))
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// POST /api/auth/create-game-session - –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–º
router.post('/create-game-session', authenticateApiToken, async (req, res) => {
    try {
        const { nickname, player_uuid, ip_address, user_agent } = req.body;

        if (!nickname || !player_uuid || !ip_address) {
            return res.status(400).json({ error: 'Nickname, player_uuid –∏ ip_address –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
        const userResult = await db.query(
            'SELECT id FROM users WHERE nickname = $1',
            [nickname]
        );

        if (userResult.rows.length === 0) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const userId = userResult.rows[0].id;

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        await db.query(`
            UPDATE game_sessions 
            SET is_active = false 
            WHERE user_id = $1 AND player_uuid = $2 AND is_active = true
        `, [userId, player_uuid]);

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –Ω–∞ 7 –¥–Ω–µ–π
        const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);

        const sessionResult = await db.query(`
            INSERT INTO game_sessions (user_id, player_uuid, nickname, expires_at, ip_address, user_agent)
            VALUES ($1, $2, $3, $4, $5, $6)
            RETURNING id
        `, [userId, player_uuid, nickname, expiresAt, ip_address, user_agent]);

        res.json({
            success: true,
            session_id: sessionResult.rows[0].id,
            expires_at: expiresAt,
            message: '–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// POST /api/auth/check-game-session - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
router.post('/check-game-session', authenticateApiToken, async (req, res) => {
    try {
        const { nickname, player_uuid, ip_address } = req.body;

        if (!nickname || !player_uuid || !ip_address) {
            return res.status(400).json({ error: 'Nickname, player_uuid –∏ ip_address –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        const sessionResult = await db.query(`
            SELECT gs.*, u.id as user_id, u.role, u.trust_level, u.is_banned
            FROM game_sessions gs
            JOIN users u ON gs.user_id = u.id
            WHERE gs.nickname = $1 
            AND gs.player_uuid = $2 
            AND gs.ip_address = $3 
            AND gs.is_active = true 
            AND gs.expires_at > NOW()
        `, [nickname, player_uuid, ip_address]);

        if (sessionResult.rows.length === 0) {
            return res.status(404).json({ 
                session_valid: false,
                error: '–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
            });
        }

        const session = sessionResult.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω
        if (session.is_banned) {
            return res.status(403).json({ 
                session_valid: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' 
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        await db.query(`
            UPDATE game_sessions 
            SET last_login = NOW() 
            WHERE id = $1
        `, [session.id]);

        res.json({
            session_valid: true,
            user: {
                id: session.user_id,
                nickname: session.nickname,
                role: session.role,
                trust_level: session.trust_level
            },
            session: {
                id: session.id,
                expires_at: session.expires_at,
                created_at: session.created_at
            },
            message: '–°–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// GET /api/auth/game-sessions - –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/game-sessions', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.id;

        const sessionsResult = await db.query(`
            SELECT id, player_uuid, nickname, expires_at, ip_address, is_active, created_at, last_login
            FROM game_sessions 
            WHERE user_id = $1 AND is_active = true
            ORDER BY last_login DESC 
            LIMIT 10
        `, [userId]);

        res.json({
            sessions: sessionsResult.rows.map(session => ({
                id: session.id,
                player_uuid: session.player_uuid,
                nickname: session.nickname,
                expires_at: session.expires_at,
                ip_address: session.ip_address,
                created_at: session.created_at,
                last_login: session.last_login,
                status: new Date(session.expires_at) < new Date() ? 'expired' : 'active'
            }))
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// POST /api/auth/terminate-game-sessions - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/terminate-game-sessions', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.id;

        const result = await db.query(`
            UPDATE game_sessions 
            SET is_active = false 
            WHERE user_id = $1 AND is_active = true
            RETURNING id
        `, [userId]);

        res.json({
            success: true,
            terminated_sessions: result.rows.length,
            message: `–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–µ—Å—Å–∏–π: ${result.rows.length}`
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

router.authenticateToken = authenticateToken;
router.authenticateApiToken = authenticateApiToken;
router.requireRole = requireRole;

module.exports = router;
