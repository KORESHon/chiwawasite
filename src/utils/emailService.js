const nodemailer = require('nodemailer');
const db = require('../../database/connection');

// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const createTransporter = () => {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMTP (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ .env)
    return nodemailer.createTransport({
        host: process.env.SMTP_HOST || 'smtp.yandex.ru',
        port: process.env.SMTP_PORT || 465,
        secure: true, // true –¥–ª—è 465, false –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ç–æ–≤
        auth: {
            user: process.env.SMTP_USER || 'chiwawa.helper@yandex.ru',
            pass: process.env.SMTP_PASS || 'hoiigazkhichljfz'
        }
    });
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const getEmailTemplate = async (id) => {
    try {
        console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ email —Å ID: ${id}`);
        const result = await db.query(`
            SELECT template_subject, template_html, template_variables FROM email_templates WHERE id = $1
        `, [id]);
        // –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É   
        if (result.rows.length === 0) {
            throw new Error(`Email template with ID '${id}' not found`);
        }

        const row = result.rows[0];
        console.log(`üìã –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω: subject=${!!row.template_subject}, html=${!!row.template_html}`);

        // template_variables –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π (CSV) –∏–ª–∏ JSON-–º–∞—Å—Å–∏–≤–æ–º
        let variables = [];
        if (row.template_variables) {
            try {
                if (row.template_variables.trim().startsWith('[')) {
                    variables = JSON.parse(row.template_variables);
                } else {
                    variables = row.template_variables.split(',').map(v => v.trim());
                }
            } catch (e) {
                variables = [];
            }
        }

        const template = {
            subject: row.template_subject,
            html: row.template_html,
            variables: variables
        };

        console.log(`‚úÖ –®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö=${variables.length}`);
        return template;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ email:', error);
        throw error;
    }
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω–µ
const replaceTemplateVariables = (template, variables) => {
    if (!template) {
        console.error('Template is undefined or null');
        return '';
    }
    
    let result = template;
    
    for (const [key, value] of Object.entries(variables)) {
        const regex = new RegExp(`{{${key}}}`, 'g');
        result = result.replace(regex, value || '');
    }
    
    return result;
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
const getServerSettings = async () => {
    try {
        const result = await db.query(`
            SELECT setting_key, setting_value FROM server_settings
        `);
        
        const settings = {};
        for (const row of result.rows) {
            settings[row.setting_key] = row.setting_value;
        }
        
        return {
            serverName: settings['server-name'] || 'Chiwawa',
            serverIp: settings['server-ip'] || 'play.chiwawa.site',
            discordInvite: settings['discord-invite'] || 'https://discord.gg/chiwawa',
            telegramInvite: settings['telegram-invite'] || 'https://t.me/chiwawa',
            currentDate: new Date().toLocaleDateString('ru-RU', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            })
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            serverName: 'Chiwawa',
            serverIp: 'play.chiwawa.site',
            discordInvite: 'https://discord.gg/chiwawa',
            telegramInvite: 'https://t.me/chiwawa',
            currentDate: new Date().toLocaleDateString('ru-RU', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            })
        };
    }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const sendEmail = async (to, id, customVariables = {}) => {
    try {
        console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email '${id}' –Ω–∞ ${to}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        const template = await getEmailTemplate(id);
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        const serverSettings = await getServerSettings();
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        const variables = {
            ...serverSettings,
            ...customVariables
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if (template.variables && template.variables.length > 0) {
            const missing = template.variables.filter(v => !(v in variables));
            if (missing.length > 0) {
                console.warn(`‚ö†Ô∏è –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞: ${missing.join(', ')}`);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —à–∞–±–ª–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        if (!template.subject || !template.html) {
            throw new Error(`–®–∞–±–ª–æ–Ω '${id}' –∏–º–µ–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: subject=${!!template.subject}, html=${!!template.html}`);
        }

        // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–µ
        const subject = replaceTemplateVariables(template.subject, variables);
        const html = replaceTemplateVariables(template.html, variables);
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä
        const transporter = createTransporter();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ SMTP –¥–∞–Ω–Ω—ã–µ
        if (!process.env.SMTP_USER || !process.env.SMTP_PASS) {
            console.log('‚ö†Ô∏è SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. Email —Å–∏–º—É–ª–∏—Ä—É–µ—Ç—Å—è.');
            console.log(`üìß –ö–æ–º—É: ${to}`);
            console.log(`üìã –¢–µ–º–∞: ${subject}`);
            console.log(`üîó –°—Å—ã–ª–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${customVariables.verificationLink || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
            return {
                success: true,
                messageId: 'simulated-' + Date.now(),
                simulated: true
            };
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        const info = await transporter.sendMail({
            from: `"${serverSettings.serverName}" <${process.env.SMTP_USER}>`,
            to: to,
            subject: subject,
            html: html
        });
        
        console.log('‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', info.messageId);
        
        return {
            success: true,
            messageId: info.messageId,
            simulated: false
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
        throw error;
    }
};

// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–∏—Å–µ–º
const sendVerificationEmail = async (email, nickname, verificationLink) => {
    return await sendEmail(email, 2, {
        nickname: nickname,
        verificationLink: verificationLink
    });
};

const sendWelcomeEmail = async (email, nickname) => {
    return await sendEmail(email, 1, {
        nickname: nickname
    });
};

const sendApplicationApprovedEmail = async (email, nickname) => {
    return await sendEmail(email, 3, {
        nickname: nickname
    });
};

const sendApplicationRejectedEmail = async (email, nickname, reason) => {
    return await sendEmail(email, 4, {
        nickname: nickname,
        rejectionReason: reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
    });
};

const sendPasswordResetEmail = async (email, nickname, resetLink) => {
    return await sendEmail(email, 5, {
        nickname: nickname,
        resetLink: resetLink
    });
};

module.exports = {
    sendEmail,
    sendVerificationEmail,
    sendWelcomeEmail,
    sendApplicationApprovedEmail,
    sendApplicationRejectedEmail,
    sendPasswordResetEmail
};
